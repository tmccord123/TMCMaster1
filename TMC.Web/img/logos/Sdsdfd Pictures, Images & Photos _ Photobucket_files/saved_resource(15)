
    
    if (window.foxydeal || window.Pricescout) {
        throw '';
    }
    window.foxydeal = {};
    
    var pageScript = function() {
    if (window.SimilarDeals) {
        return;
    }

    var promisePoly = (function() {
        "use strict";
        function lib$es6$promise$utils$objectOrFunction(x) {
            return typeof x === 'function' || (typeof x === 'object' && x !== null);
        }

        function lib$es6$promise$utils$isFunction(x) {
            return typeof x === 'function';
        }

        function lib$es6$promise$utils$isMaybeThenable(x) {
            return typeof x === 'object' && x !== null;
        }

        var lib$es6$promise$utils$_isArray;
        if (!Array.isArray) {
            lib$es6$promise$utils$_isArray = function (x) {
                return Object.prototype.toString.call(x) === '[object Array]';
            };
        } else {
            lib$es6$promise$utils$_isArray = Array.isArray;
        }

        var lib$es6$promise$utils$isArray = lib$es6$promise$utils$_isArray;
        var lib$es6$promise$asap$len = 0;
        var lib$es6$promise$asap$toString = {}.toString;
        var lib$es6$promise$asap$vertxNext;
        var lib$es6$promise$asap$customSchedulerFn;

        var lib$es6$promise$asap$asap = function asap(callback, arg) {
            lib$es6$promise$asap$queue[lib$es6$promise$asap$len] = callback;
            lib$es6$promise$asap$queue[lib$es6$promise$asap$len + 1] = arg;
            lib$es6$promise$asap$len += 2;
            if (lib$es6$promise$asap$len === 2) {

                if (lib$es6$promise$asap$customSchedulerFn) {
                    lib$es6$promise$asap$customSchedulerFn(lib$es6$promise$asap$flush);
                } else {
                    lib$es6$promise$asap$scheduleFlush();
                }
            }
        }

        function lib$es6$promise$asap$setScheduler(scheduleFn) {
            lib$es6$promise$asap$customSchedulerFn = scheduleFn;
        }

        function lib$es6$promise$asap$setAsap(asapFn) {
            lib$es6$promise$asap$asap = asapFn;
        }

        var lib$es6$promise$asap$browserWindow = (typeof window !== 'undefined') ? window : undefined;
        var lib$es6$promise$asap$browserGlobal = lib$es6$promise$asap$browserWindow || {};
        var lib$es6$promise$asap$BrowserMutationObserver = lib$es6$promise$asap$browserGlobal.MutationObserver || lib$es6$promise$asap$browserGlobal.WebKitMutationObserver;
        var lib$es6$promise$asap$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
        var lib$es6$promise$asap$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
            typeof importScripts !== 'undefined' &&
            typeof MessageChannel !== 'undefined';
        function lib$es6$promise$asap$useNextTick() {
            var nextTick = process.nextTick;
            var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
            if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
                nextTick = setImmediate;
            }
            return function() {
                nextTick(lib$es6$promise$asap$flush);
            };
        }
        function lib$es6$promise$asap$useVertxTimer() {
            return function() {
                lib$es6$promise$asap$vertxNext(lib$es6$promise$asap$flush);
            };
        }

        function lib$es6$promise$asap$useMutationObserver() {
            var iterations = 0;
            var observer = new lib$es6$promise$asap$BrowserMutationObserver(lib$es6$promise$asap$flush);
            var node = document.createTextNode('');
            observer.observe(node, { characterData: true });

            return function() {
                node.data = (iterations = ++iterations % 2);
            };
        }
        function lib$es6$promise$asap$useMessageChannel() {
            var channel = new MessageChannel();
            channel.port1.onmessage = lib$es6$promise$asap$flush;
            return function () {
                channel.port2.postMessage(0);
            };
        }

        function lib$es6$promise$asap$useSetTimeout() {
            return function() {
                setTimeout(lib$es6$promise$asap$flush, 1);
            };
        }

        var lib$es6$promise$asap$queue = new Array(1000);
        function lib$es6$promise$asap$flush() {
            for (var i = 0; i < lib$es6$promise$asap$len; i+=2) {
                var callback = lib$es6$promise$asap$queue[i];
                var arg = lib$es6$promise$asap$queue[i+1];

                callback(arg);

                lib$es6$promise$asap$queue[i] = undefined;
                lib$es6$promise$asap$queue[i+1] = undefined;
            }

            lib$es6$promise$asap$len = 0;
        }

        function lib$es6$promise$asap$attemptVertex() {
            try {
                var r = require;
                var vertx = r('vertx');
                lib$es6$promise$asap$vertxNext = vertx.runOnLoop || vertx.runOnContext;
                return lib$es6$promise$asap$useVertxTimer();
            } catch(e) {
                return lib$es6$promise$asap$useSetTimeout();
            }
        }

        var lib$es6$promise$asap$scheduleFlush;
        if (lib$es6$promise$asap$isNode) {
            lib$es6$promise$asap$scheduleFlush = lib$es6$promise$asap$useNextTick();
        } else if (lib$es6$promise$asap$BrowserMutationObserver) {
            lib$es6$promise$asap$scheduleFlush = lib$es6$promise$asap$useMutationObserver();
        } else if (lib$es6$promise$asap$isWorker) {
            lib$es6$promise$asap$scheduleFlush = lib$es6$promise$asap$useMessageChannel();
        } else if (lib$es6$promise$asap$browserWindow === undefined && typeof require === 'function') {
            lib$es6$promise$asap$scheduleFlush = lib$es6$promise$asap$attemptVertex();
        } else {
            lib$es6$promise$asap$scheduleFlush = lib$es6$promise$asap$useSetTimeout();
        }

        function lib$es6$promise$internal$noop() {}

        var lib$es6$promise$internal$PENDING   = void 0;
        var lib$es6$promise$internal$FULFILLED = 1;
        var lib$es6$promise$internal$REJECTED  = 2;

        var lib$es6$promise$internal$GET_THEN_ERROR = new lib$es6$promise$internal$ErrorObject();

        function lib$es6$promise$internal$selfFullfillment() {
            return new TypeError("You cannot resolve a promise with itself");
        }

        function lib$es6$promise$internal$cannotReturnOwn() {
            return new TypeError('A promises callback cannot return that same promise.');
        }

        function lib$es6$promise$internal$getThen(promise) {
            try {
                return promise.then;
            } catch(error) {
                lib$es6$promise$internal$GET_THEN_ERROR.error = error;
                return lib$es6$promise$internal$GET_THEN_ERROR;
            }
        }

        function lib$es6$promise$internal$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
            try {
                then.call(value, fulfillmentHandler, rejectionHandler);
            } catch(e) {
                return e;
            }
        }

        function lib$es6$promise$internal$handleForeignThenable(promise, thenable, then) {
            lib$es6$promise$asap$asap(function(promise) {
                var sealed = false;
                var error = lib$es6$promise$internal$tryThen(then, thenable, function(value) {
                    if (sealed) { return; }
                    sealed = true;
                    if (thenable !== value) {
                        lib$es6$promise$internal$resolve(promise, value);
                    } else {
                        lib$es6$promise$internal$fulfill(promise, value);
                    }
                }, function(reason) {
                    if (sealed) { return; }
                    sealed = true;

                    lib$es6$promise$internal$reject(promise, reason);
                }, 'Settle: ' + (promise._label || ' unknown promise'));

                if (!sealed && error) {
                    sealed = true;
                    lib$es6$promise$internal$reject(promise, error);
                }
            }, promise);
        }

        function lib$es6$promise$internal$handleOwnThenable(promise, thenable) {
            if (thenable._state === lib$es6$promise$internal$FULFILLED) {
                lib$es6$promise$internal$fulfill(promise, thenable._result);
            } else if (thenable._state === lib$es6$promise$internal$REJECTED) {
                lib$es6$promise$internal$reject(promise, thenable._result);
            } else {
                lib$es6$promise$internal$subscribe(thenable, undefined, function(value) {
                    lib$es6$promise$internal$resolve(promise, value);
                }, function(reason) {
                    lib$es6$promise$internal$reject(promise, reason);
                });
            }
        }

        function lib$es6$promise$internal$handleMaybeThenable(promise, maybeThenable) {
            if (maybeThenable.constructor === promise.constructor) {
                lib$es6$promise$internal$handleOwnThenable(promise, maybeThenable);
            } else {
                var then = lib$es6$promise$internal$getThen(maybeThenable);

                if (then === lib$es6$promise$internal$GET_THEN_ERROR) {
                    lib$es6$promise$internal$reject(promise, lib$es6$promise$internal$GET_THEN_ERROR.error);
                } else if (then === undefined) {
                    lib$es6$promise$internal$fulfill(promise, maybeThenable);
                } else if (lib$es6$promise$utils$isFunction(then)) {
                    lib$es6$promise$internal$handleForeignThenable(promise, maybeThenable, then);
                } else {
                    lib$es6$promise$internal$fulfill(promise, maybeThenable);
                }
            }
        }

        function lib$es6$promise$internal$resolve(promise, value) {
            if (promise === value) {
                lib$es6$promise$internal$reject(promise, lib$es6$promise$internal$selfFullfillment());
            } else if (lib$es6$promise$utils$objectOrFunction(value)) {
                lib$es6$promise$internal$handleMaybeThenable(promise, value);
            } else {
                lib$es6$promise$internal$fulfill(promise, value);
            }
        }

        function lib$es6$promise$internal$publishRejection(promise) {
            if (promise._onerror) {
                promise._onerror(promise._result);
            }

            lib$es6$promise$internal$publish(promise);
        }

        function lib$es6$promise$internal$fulfill(promise, value) {
            if (promise._state !== lib$es6$promise$internal$PENDING) { return; }

            promise._result = value;
            promise._state = lib$es6$promise$internal$FULFILLED;

            if (promise._subscribers.length !== 0) {
                lib$es6$promise$asap$asap(lib$es6$promise$internal$publish, promise);
            }
        }

        function lib$es6$promise$internal$reject(promise, reason) {
            if (promise._state !== lib$es6$promise$internal$PENDING) { return; }
            promise._state = lib$es6$promise$internal$REJECTED;
            promise._result = reason;

            lib$es6$promise$asap$asap(lib$es6$promise$internal$publishRejection, promise);
        }

        function lib$es6$promise$internal$subscribe(parent, child, onFulfillment, onRejection) {
            var subscribers = parent._subscribers;
            var length = subscribers.length;

            parent._onerror = null;

            subscribers[length] = child;
            subscribers[length + lib$es6$promise$internal$FULFILLED] = onFulfillment;
            subscribers[length + lib$es6$promise$internal$REJECTED]  = onRejection;

            if (length === 0 && parent._state) {
                lib$es6$promise$asap$asap(lib$es6$promise$internal$publish, parent);
            }
        }

        function lib$es6$promise$internal$publish(promise) {
            var subscribers = promise._subscribers;
            var settled = promise._state;

            if (subscribers.length === 0) { return; }

            var child, callback, detail = promise._result;

            for (var i = 0; i < subscribers.length; i += 3) {
                child = subscribers[i];
                callback = subscribers[i + settled];

                if (child) {
                    lib$es6$promise$internal$invokeCallback(settled, child, callback, detail);
                } else {
                    callback(detail);
                }
            }

            promise._subscribers.length = 0;
        }

        function lib$es6$promise$internal$ErrorObject() {
            this.error = null;
        }

        var lib$es6$promise$internal$TRY_CATCH_ERROR = new lib$es6$promise$internal$ErrorObject();

        function lib$es6$promise$internal$tryCatch(callback, detail) {
            try {
                return callback(detail);
            } catch(e) {
                lib$es6$promise$internal$TRY_CATCH_ERROR.error = e;
                return lib$es6$promise$internal$TRY_CATCH_ERROR;
            }
        }

        function lib$es6$promise$internal$invokeCallback(settled, promise, callback, detail) {
            var hasCallback = lib$es6$promise$utils$isFunction(callback),
                value, error, succeeded, failed;

            if (hasCallback) {
                value = lib$es6$promise$internal$tryCatch(callback, detail);

                if (value === lib$es6$promise$internal$TRY_CATCH_ERROR) {
                    failed = true;
                    error = value.error;
                    value = null;
                } else {
                    succeeded = true;
                }

                if (promise === value) {
                    lib$es6$promise$internal$reject(promise, lib$es6$promise$internal$cannotReturnOwn());
                    return;
                }

            } else {
                value = detail;
                succeeded = true;
            }

            if (promise._state !== lib$es6$promise$internal$PENDING) {
            } else if (hasCallback && succeeded) {
                lib$es6$promise$internal$resolve(promise, value);
            } else if (failed) {
                lib$es6$promise$internal$reject(promise, error);
            } else if (settled === lib$es6$promise$internal$FULFILLED) {
                lib$es6$promise$internal$fulfill(promise, value);
            } else if (settled === lib$es6$promise$internal$REJECTED) {
                lib$es6$promise$internal$reject(promise, value);
            }
        }

        function lib$es6$promise$internal$initializePromise(promise, resolver) {
            try {
                resolver(function resolvePromise(value){
                    lib$es6$promise$internal$resolve(promise, value);
                }, function rejectPromise(reason) {
                    lib$es6$promise$internal$reject(promise, reason);
                });
            } catch(e) {
                lib$es6$promise$internal$reject(promise, e);
            }
        }

        function lib$es6$promise$enumerator$Enumerator(Constructor, input) {
            var enumerator = this;

            enumerator._instanceConstructor = Constructor;
            enumerator.promise = new Constructor(lib$es6$promise$internal$noop);

            if (enumerator._validateInput(input)) {
                enumerator._input     = input;
                enumerator.length     = input.length;
                enumerator._remaining = input.length;

                enumerator._init();

                if (enumerator.length === 0) {
                    lib$es6$promise$internal$fulfill(enumerator.promise, enumerator._result);
                } else {
                    enumerator.length = enumerator.length || 0;
                    enumerator._enumerate();
                    if (enumerator._remaining === 0) {
                        lib$es6$promise$internal$fulfill(enumerator.promise, enumerator._result);
                    }
                }
            } else {
                lib$es6$promise$internal$reject(enumerator.promise, enumerator._validationError());
            }
        }

        lib$es6$promise$enumerator$Enumerator.prototype._validateInput = function(input) {
            return lib$es6$promise$utils$isArray(input);
        };

        lib$es6$promise$enumerator$Enumerator.prototype._validationError = function() {
            return new Error('Array Methods must be provided an Array');
        };

        lib$es6$promise$enumerator$Enumerator.prototype._init = function() {
            this._result = new Array(this.length);
        };

        var lib$es6$promise$enumerator$default = lib$es6$promise$enumerator$Enumerator;

        lib$es6$promise$enumerator$Enumerator.prototype._enumerate = function() {
            var enumerator = this;

            var length  = enumerator.length;
            var promise = enumerator.promise;
            var input   = enumerator._input;

            for (var i = 0; promise._state === lib$es6$promise$internal$PENDING && i < length; i++) {
                enumerator._eachEntry(input[i], i);
            }
        };

        lib$es6$promise$enumerator$Enumerator.prototype._eachEntry = function(entry, i) {
            var enumerator = this;
            var c = enumerator._instanceConstructor;

            if (lib$es6$promise$utils$isMaybeThenable(entry)) {
                if (entry.constructor === c && entry._state !== lib$es6$promise$internal$PENDING) {
                    entry._onerror = null;
                    enumerator._settledAt(entry._state, i, entry._result);
                } else {
                    enumerator._willSettleAt(c.resolve(entry), i);
                }
            } else {
                enumerator._remaining--;
                enumerator._result[i] = entry;
            }
        };

        lib$es6$promise$enumerator$Enumerator.prototype._settledAt = function(state, i, value) {
            var enumerator = this;
            var promise = enumerator.promise;

            if (promise._state === lib$es6$promise$internal$PENDING) {
                enumerator._remaining--;

                if (state === lib$es6$promise$internal$REJECTED) {
                    lib$es6$promise$internal$reject(promise, value);
                } else {
                    enumerator._result[i] = value;
                }
            }

            if (enumerator._remaining === 0) {
                lib$es6$promise$internal$fulfill(promise, enumerator._result);
            }
        };

        lib$es6$promise$enumerator$Enumerator.prototype._willSettleAt = function(promise, i) {
            var enumerator = this;

            lib$es6$promise$internal$subscribe(promise, undefined, function(value) {
                enumerator._settledAt(lib$es6$promise$internal$FULFILLED, i, value);
            }, function(reason) {
                enumerator._settledAt(lib$es6$promise$internal$REJECTED, i, reason);
            });
        };
        function lib$es6$promise$promise$all$all(entries) {
            return new lib$es6$promise$enumerator$default(this, entries).promise;
        }
        var lib$es6$promise$promise$all$default = lib$es6$promise$promise$all$all;
        function lib$es6$promise$promise$race$race(entries) {
            /*jshint validthis:true */
            var Constructor = this;

            var promise = new Constructor(lib$es6$promise$internal$noop);

            if (!lib$es6$promise$utils$isArray(entries)) {
                lib$es6$promise$internal$reject(promise, new TypeError('You must pass an array to race.'));
                return promise;
            }

            var length = entries.length;

            function onFulfillment(value) {
                lib$es6$promise$internal$resolve(promise, value);
            }

            function onRejection(reason) {
                lib$es6$promise$internal$reject(promise, reason);
            }

            for (var i = 0; promise._state === lib$es6$promise$internal$PENDING && i < length; i++) {
                lib$es6$promise$internal$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
            }

            return promise;
        }
        var lib$es6$promise$promise$race$default = lib$es6$promise$promise$race$race;
        function lib$es6$promise$promise$resolve$resolve(object) {
            /*jshint validthis:true */
            var Constructor = this;

            if (object && typeof object === 'object' && object.constructor === Constructor) {
                return object;
            }

            var promise = new Constructor(lib$es6$promise$internal$noop);
            lib$es6$promise$internal$resolve(promise, object);
            return promise;
        }
        var lib$es6$promise$promise$resolve$default = lib$es6$promise$promise$resolve$resolve;
        function lib$es6$promise$promise$reject$reject(reason) {
            /*jshint validthis:true */
            var Constructor = this;
            var promise = new Constructor(lib$es6$promise$internal$noop);
            lib$es6$promise$internal$reject(promise, reason);
            return promise;
        }
        var lib$es6$promise$promise$reject$default = lib$es6$promise$promise$reject$reject;

        var lib$es6$promise$promise$counter = 0;

        function lib$es6$promise$promise$needsResolver() {
            throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
        }

        function lib$es6$promise$promise$needsNew() {
            throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        }

        var lib$es6$promise$promise$default = lib$es6$promise$promise$Promise;

        function lib$es6$promise$promise$Promise(resolver) {
            this._id = lib$es6$promise$promise$counter++;
            this._state = undefined;
            this._result = undefined;
            this._subscribers = [];

            if (lib$es6$promise$internal$noop !== resolver) {
                if (!lib$es6$promise$utils$isFunction(resolver)) {
                    lib$es6$promise$promise$needsResolver();
                }

                if (!(this instanceof lib$es6$promise$promise$Promise)) {
                    lib$es6$promise$promise$needsNew();
                }

                lib$es6$promise$internal$initializePromise(this, resolver);
            }
        }

        lib$es6$promise$promise$Promise.all = lib$es6$promise$promise$all$default;
        lib$es6$promise$promise$Promise.race = lib$es6$promise$promise$race$default;
        lib$es6$promise$promise$Promise.resolve = lib$es6$promise$promise$resolve$default;
        lib$es6$promise$promise$Promise.reject = lib$es6$promise$promise$reject$default;
        lib$es6$promise$promise$Promise._setScheduler = lib$es6$promise$asap$setScheduler;
        lib$es6$promise$promise$Promise._setAsap = lib$es6$promise$asap$setAsap;
        lib$es6$promise$promise$Promise._asap = lib$es6$promise$asap$asap;

        lib$es6$promise$promise$Promise.prototype = {
            constructor: lib$es6$promise$promise$Promise,

            then: function(onFulfillment, onRejection) {
                var parent = this;
                var state = parent._state;

                if (state === lib$es6$promise$internal$FULFILLED && !onFulfillment || state === lib$es6$promise$internal$REJECTED && !onRejection) {
                    return this;
                }

                var child = new this.constructor(lib$es6$promise$internal$noop);
                var result = parent._result;

                if (state) {
                    var callback = arguments[state - 1];
                    lib$es6$promise$asap$asap(function(){
                        lib$es6$promise$internal$invokeCallback(state, child, callback, result);
                    });
                } else {
                    lib$es6$promise$internal$subscribe(parent, child, onFulfillment, onRejection);
                }

                return child;
            },
            'catch': function(onRejection) {
                return this.then(null, onRejection);
            }
        };
        function lib$es6$promise$polyfill$polyfill() {
            var local;

            if (typeof global !== 'undefined') {
                local = global;
            } else if (typeof self !== 'undefined') {
                local = self;
            } else {
                try {
                    local = Function('return this')();
                } catch (e) {
                    throw new Error('polyfill failed because global object is unavailable in this environment');
                }
            }

            var P = local.Promise;

            if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
                return;
            }

            local.Promise = lib$es6$promise$promise$default;
        }
        var lib$es6$promise$polyfill$default = lib$es6$promise$polyfill$polyfill;

        var lib$es6$promise$umd$ES6Promise = {
            'Promise': lib$es6$promise$promise$default,
            'polyfill': lib$es6$promise$polyfill$default
        };

        if (typeof define === 'function' && define['amd']) {
            define(function() { return lib$es6$promise$umd$ES6Promise; });
        } else if (typeof module !== 'undefined' && module['exports']) {
            module['exports'] = lib$es6$promise$umd$ES6Promise;
        } else if (typeof this !== 'undefined') {
            this['ES6Promise'] = lib$es6$promise$umd$ES6Promise;
        }

        lib$es6$promise$polyfill$default();
    });

    if(typeof(window.Promise) != 'function') {
        promisePoly.call(window);
    }

    window.SimilarDeals = {
        'library': {},
        'core': {},
        'engine': {},
        'ui': {},
        'index': {}
    };
    SimilarDeals.originName = 'foxy' + 'deal';
    SimilarDeals.library.objectManipulations = function() {
        var module = {
            exports: {}
        };
        var obj = {
            hasProperties: function(object, structure) {
                for (var attr in structure) {
                    if (!object.hasOwnProperty(attr)) {
                        return false;
                    }
                    if (!this.hasProperties(object[attr], structure[attr])) {
                        return false;
                    }
                }
                return true;
            },
            ensureProperties: function(object, structure) {
                for (var attr in structure) {
                    if (!object.hasOwnProperty(attr)) {
                        object[attr] = structure[attr];
                    }
                    if (this.isObject(structure[attr])) {
                        if (!this.isEmpty(structure[attr])) {
                            this.ensureProperties(object[attr], structure[attr]);
                        }
                    }
                }
                return object;
            },
            hasOwnValue: function(obj, val) {
                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && obj[prop] === val) {
                        return true;
                    }
                }
                return false;
            },
            isEmpty: function(obj) {
                if (this.isObject(obj)) {
                    return Object.keys(obj).length === 0;
                }
                return false;
            },
            isObject: function(variable) {
                return variable !== null && typeof variable === 'object';
            }
        };
        module.exports = obj;
        return module.exports;
    }();
    SimilarDeals.library.logger = function() {
        var module = {
            exports: {}
        };
        SimilarDeals.environment = 'test';

        function Logger() {
            var thisLog = null;
            if (SimilarDeals.environment === 'live') {
                thisLog = function(pType, pMessage, pSource) { };
            } else {
                thisLog = function(pType, pMessage, pSource) {};
            }
            return {
                error: function(pLogMessage, pOtherSources) {
                    thisLog('error', pLogMessage, pOtherSources);
                },
                info: function(pLogMessage, pOtherSources) {
                    thisLog('info', pLogMessage, pOtherSources);
                },
                warn: function(pLogMessage, pOtherSources) {
                    thisLog('warn', pLogMessage, pOtherSources);
                },
                log: function(pLogMessage, pOtherSources) {
                    thisLog('log', pLogMessage, pOtherSources);
                }
            };
        };
        module.exports = new Logger();
        return module.exports;
    }();
    SimilarDeals.library.eventHandlers = function() {
        var module = {
            exports: {}
        };
        module.exports = {
            addEventListener: function(element, event, eventHandler) {
                if (element.addEventListener) {
                    element.addEventListener(event, eventHandler, false);
                } else if (element.attachEvent) {
                    element.attachEvent('on' + event, eventHandler);
                }
            },
            fireEvent: function(event, data) {
                parent.postMessage(JSON.stringify({
                    event: event,
                    data: data
                }), '*');
            }
        };
        return module.exports;
    }();
    SimilarDeals.library.promiseCollection = function() {
        var module = {
            exports: {}
        };
        module.exports = function() {
            var params;
            var callbackArray = [];
            var initialized = false;
            var exeCallbacks = function execallbacks() {
                for (var i = 0; i < callbackArray.length; i++) {
                    callbackArray[i]();
                }
                callbackArray.slice(0, callbackArray.length);
            };
            return {
                registerPromise: function() {
                    return new Promise(function(resolve, reject) {
                        if (initialized) {
                            resolve.apply(null, params);
                            return;
                        }
                        callbackArray.push(function() {
                            resolve.apply(null, params);
                        });
                    });
                },
                invoke: function() {
                    params = arguments;
                    exeCallbacks();
                    initialized = true;
                }
            };
        };
        return module.exports;
    }();
    SimilarDeals.core.init = function() {
        var module = {
            exports: {}
        };
        var obj = SimilarDeals.library.objectManipulations;
        var init = function() {
            var infoObject;
            var callbackArray = [];
            var defaultInfoObject = {
                partner: {
                    id: 1072,
                    partnerId: 1072,
                    sub_id: 'default',
                    subId: 'default'
                },
                rules: {},
                user: {
                    uid: '',
                    ext: '',
                    locale: ''
                },
                browser: {
                    sf: true
                },
                baseUrl: 'https://go.' + SimilarDeals.originName + '.com',
                aboutLink: 'http://www.' + SimilarDeals.originName + '.com/about/',
                tldArray: ['com'],
                domain: {},
                config: {}
            };
            var exeCallbacks = function execallbacks(info) {
                for (var i = 0; i < callbackArray.length; i++) {
                    callbackArray[i](info);
                }
                callbackArray.splice(0, callbackArray.length);
            };
            return {
                done: function() {
                    return new Promise(function(resolve, reject) {
                        if (infoObject) {
                            resolve(infoObject);
                        } else {
                            callbackArray.push(function() {
                                resolve(infoObject);
                            });
                        }
                    });
                },
                call: function(info) {
                    infoObject = obj.ensureProperties(info, defaultInfoObject);
                    infoObject.partner.applink = function() {
                        if (info.partner.applink) {
                            return info.partner.applink;
                        }
                        return null;
                    }();
                    infoObject.partner.appid = function() {
                        if (info.partner.appid) {
                            return info.partner.appid;
                        }
                        if (info.partner.id == 1052) {
                            var rvzr_rmp_id = 'fxfxdl';
                            try {
                                return window['__rvz' + rvzr_rmp_id].product_name;
                            } catch (e) {
                                return null;
                            }
                        }
                        if (info.partner.id != 1006) {
                            return null;
                        }
                    }();
                    exeCallbacks(infoObject);
                }
            };
        }();
        module.exports = init;
        return module.exports;
    }();
    SimilarDeals.library.browserCheck = function() {
        var module = {
            exports: {}
        };
        var browserCheck = function browserCheck() {
            return new Promise(function(resolve, reject) {
                'use strict';
                var docMode = document.documentMode;
                var isIE = function() {
                    if (document.documentMode) {
                        try {
                            delete document.documentMode;
                        } catch (ex) { }
                        if (docMode === document.documentMode) {
                            return true;
                        } else {
                            document.documentMode = docMode;
                            return false;
                        }
                    }
                };
                var isOldIE = function() {
                    var ieDiv = document.createElement('div');
                    ieDiv.innerHTML = '<!--[if IE]><i></i><![endif]-->';
                    return ieDiv.getElementsByTagName('i').length === 1;
                };
                if (isIE()) {
                    if (docMode > 8) {
                        resolve({
                            supported: true,
                            ie: true
                        });
                    } else {
                        resolve({
                            supported: false
                        });
                    }
                } else if (isOldIE()) {
                    resolve({
                        supported: false
                    });
                } else {
                    resolve({
                        supported: true
                    });
                }
            });
        };
        module.exports = browserCheck;
        return module.exports;
    }();
    SimilarDeals.library.crossIframeManager = function() {
        var module = {
            exports: {}
        };
        var iFrameLogger = SimilarDeals.library.logger;

        function IFrameManager() {
            var currentTransactionID = Math.floor(Math.random() * 1000001);
            var boundedChannels = {};
            var consoleDebugScope = '[CROSS IFRAME MANAGER]';

            function hasWin(pArray, pWin) {
                var arrayL = pArray.length;
                while (arrayL--) {
                    if (pArray[arrayL].win === pWin) {
                        return true;
                    } else {
                        return false;
                    }
                }
            };
            var transactionIDTable = {};

            function windowMessageHandler(pData) {
                var thisMessage = null;
                var messageSourceWindow = pData.source;
                var messageOrigin = pData.origin;
                var messageScope = null;
                var messageID = null;
                var messageMethod = null;
                try {
                    thisMessage = JSON.parse(pData.data);
                } catch (e) {
                    return;
                }
                if (typeof thisMessage.method === 'string') {
                    var ar = thisMessage.method.split('::');
                    if (ar.length == 2) {
                        messageScope = ar[0];
                        messageMethod = ar[1];
                    } else {
                        messageMethod = thisMessage.method;
                    }
                }
                if (typeof thisMessage.id !== 'undefined') {
                    messageID = thisMessage.id;
                }
                if (typeof messageMethod === 'string') {
                    var delivered = false;
                    if (boundedChannels[messageOrigin] && boundedChannels[messageOrigin][messageScope]) {
                        for (var j = 0; j < boundedChannels[messageOrigin][messageScope].length; j++) {
                            if (boundedChannels[messageOrigin][messageScope][j].win === messageSourceWindow) {
                                boundedChannels[messageOrigin][messageScope][j].handler(messageOrigin, messageMethod, thisMessage);
                                delivered = true;
                                break;
                            }
                        }
                    }
                    if (!delivered && boundedChannels['*'] && boundedChannels['*'][messageScope]) {
                        for (var l = 0; l < boundedChannels['*'][messageScope].length; l++) {
                            if (boundedChannels['*'][messageScope][l].win === messageSourceWindow) {
                                boundedChannels['*'][messageScope][l].handler(messageOrigin, messageMethod, thisMessage);
                                break;
                            }
                        }
                    }
                } else if (typeof messageID != 'undefined') {
                    if (transactionIDTable[messageID]) {
                        transactionIDTable[messageID](messageOrigin, messageMethod, thisMessage);
                    }
                }
            };
            window.addEventListener('message', windowMessageHandler, false);
            this.createChannel = function(buildParams) {
                if (buildParams.targetOrigin !== '*') {
                    var thisMatch = buildParams.targetOrigin.match(/^https?:\/\/(?:[-a-zA-Z0-9_\.])+(?::\d+)?/);
                    if (thisMatch !== null) {
                        buildParams.targetOrigin = thisMatch[0].toLowerCase();
                    } else {
                        iFrameLogger.error('build error: invalid origin', consoleDebugScope);
                        return false;
                    }
                }
                var channelID = (0 | Math.random() * 900000000).toString(36);
                var requestTable = {};
                var outTbl = {};
                var invokeTable = {};
                var ready = false;
                var pendingQueue = [];

                function createTransaction(id, origin, callbacks) {
                    var shouldDelayReturn = false;
                    var completed = false;
                    return {
                        origin: origin,
                        invoke: function(cbName, v) {
                            if (!invokeTable[id]) {
                                iFrameLogger.error('invalid transaction id on invoke', consoleDebugScope);
                                return;
                            }
                            var valid = false;
                            for (var i = 0; i < callbacks.length; i++) {
                                if (cbName === callbacks[i]) {
                                    valid = true;
                                    break;
                                }
                            }
                            if (!valid) {
                                iFrameLogger.error('invalid callback "' + cbName + '" on invoke', consoleDebugScope);
                                return;
                            }
                            postMessage({
                                id: id,
                                callback: cbName,
                                params: v
                            });
                        },
                        error: function(error, message) {
                            completed = true;
                            if (!invokeTable[id]) {
                                iFrameLogger.error('error call on non-existent message', consoleDebugScope);
                                return;
                            }
                            delete invokeTable[id];
                            postMessage({
                                id: id,
                                error: error,
                                message: message
                            });
                        },
                        complete: function(v) {
                            completed = true;
                            if (!invokeTable[id]) {
                                iFrameLogger.error('complete call on non-existent message', consoleDebugScope);
                                return;
                            }
                            delete invokeTable[id];
                            postMessage({
                                id: id,
                                result: v
                            });
                        },
                        delayReturn: function(delay) {
                            if (typeof delay === 'boolean') {
                                shouldDelayReturn = delay === true;
                            }
                            return shouldDelayReturn;
                        },
                        completed: function() {
                            return completed;
                        }
                    };
                };

                function onMessage(origin, method, m) {
                    if (m.id && method) {
                        if (requestTable[method]) {
                            var trans = createTransaction(m.id, origin, m.callbacks ? m.callbacks : []);
                            invokeTable[m.id] = {};
                            try {
                                if (m.callbacks && m.callbacks.constructor.toString().indexOf('Array') !== -1 && m.callbacks.length > 0) {
                                    for (var i = 0; i < m.callbacks.length; i++) {
                                        var path = m.callbacks[i];
                                        var obj = m.params;
                                        var pathItems = path.split('/');
                                        for (var j = 0; j < pathItems.length - 1; j++) {
                                            var cp = pathItems[j];
                                            if (typeof obj[cp] !== 'object') {
                                                obj[cp] = {};
                                            }
                                            obj = obj[cp];
                                        }
                                        obj[pathItems[pathItems.length - 1]] = function() {
                                            var cbName = path;
                                            return function(params) {
                                                return trans.invoke(cbName, params);
                                            };
                                        }();
                                    }
                                }
                                var resp = requestTable[method](trans, m.params);
                                if (!trans.delayReturn() && !trans.completed()) {
                                    trans.complete(resp);
                                }
                            } catch (e) {
                                trans.error('run error', e.toString());
                            }
                        }
                    } else if (m.id && m.callback) {
                        if (!outTbl[m.id] || !outTbl[m.id].callbacks || !outTbl[m.id].callbacks[m.callback]) {
                            iFrameLogger.log('ignoring invalid callback, id:' + m.id + '(' + m.callback + ')', consoleDebugScope);
                        } else {
                            outTbl[m.id].callbacks[m.callback](m.params);
                        }
                    } else if (m.id) {
                        if (!outTbl[m.id]) {
                            iFrameLogger.log('ignoring invalid response: ' + m.id, consoleDebugScope);
                        } else {
                            if (m.error) {
                                (1, outTbl[m.id].error)(m.error, m.message);
                            } else {
                                if (m.result !== undefined) {
                                    (1, outTbl[m.id].success)(m.result);
                                } else {
                                    (1, outTbl[m.id].success)();
                                }
                            }
                            delete outTbl[m.id];
                            delete transactionIDTable[m.id];
                        }
                    } else if (method) {
                        if (requestTable[method]) {
                            requestTable[method]({
                                origin: origin
                            }, m.params);
                        }
                    }
                };
                var exists = false;
                if (buildParams.targetOrigin === '*') {
                    for (var k in boundedChannels) {
                        if (!boundedChannels.hasOwnProperty(k) || k === '*') {
                            continue;
                        }
                        if (typeof boundedChannels[k][buildParams.scope] === 'object') {
                            exists = hasWin(boundedChannels[k][buildParams.scope], buildParams.targetWindow);
                            if (exists) {
                                break;
                            }
                        }
                    }
                } else {
                    if (boundedChannels['*'] && boundedChannels['*'][buildParams.scope]) {
                        exists = hasWin(boundedChannels['*'][buildParams.scope], buildParams.targetWindow);
                    }
                    if (!exists && boundedChannels[buildParams.targetOrigin] && boundedChannels[buildParams.targetOrigin][buildParams.scope]) {
                        exists = hasWin(boundedChannels[buildParams.targetOrigin][buildParams.scope], buildParams.targetWindow);
                    }
                }
                if (exists) {
                    iFrameLogger.error('channel overlap on origin "' + buildParams.targetOrigin + '" and scope "' + buildParams.scope + '"', consoleDebugScope);
                    return;
                }
                if (typeof boundedChannels[buildParams.targetOrigin] != 'object') {
                    boundedChannels[buildParams.targetOrigin] = {};
                }
                if (typeof boundedChannels[buildParams.targetOrigin][buildParams.scope] != 'object') {
                    boundedChannels[buildParams.targetOrigin][buildParams.scope] = [];
                }
                boundedChannels[buildParams.targetOrigin][buildParams.scope].push({
                    win: buildParams.targetWindow,
                    handler: onMessage
                });

                function scopeMethod(m) {
                    if (typeof buildParams.scope === 'string' && buildParams.scope.length) {
                        m = [
                            buildParams.scope,
                            m
                        ].join('::');
                    }
                    return m;
                };

                function postMessage(msg, force) {
                    if (!force && !ready) {
                        pendingQueue.push(msg);
                    } else {
                        buildParams.targetWindow.postMessage(JSON.stringify(msg), buildParams.targetOrigin);
                    }
                };

                function onReady(trans, type) {
                    if (ready) {
                        iFrameLogger.error('ready message in ready state error', consoleDebugScope);
                        return;
                    }
                    channelObject.unbind('__ready');
                    ready = true;
                    if (type === 'win_handshake') {
                        postMessage({
                            method: scopeMethod('__ready'),
                            params: 'win_handshake'
                        });
                    }
                    while (pendingQueue.length) {
                        postMessage(pendingQueue.pop());
                    }
                    buildParams.onReady(channelObject);
                };
                var channelObject = {
                    unbind: function(method) {
                        try {
                            delete requestTable[method];
                        } catch (unbindErr) {
                            return false;
                        }
                        return true;
                    },
                    bind: function(method, cb) {
                        if (!method || !cb || requestTable[method]) {
                            iFrameLogger.error('bind error - invalid parameters', consoleDebugScope);
                        }
                        requestTable[method] = cb;
                    },
                    call: function(m) {
                        if (!m.method || !m.success) {
                            iFrameLogger.error('invlid arguments to call', consoleDebugScope);
                            return;
                        }
                        var callbacks = {};
                        var callbackNames = [];
                        var seen = [];
                        var pruneFunctions = function(path, obj) {
                            if (seen.indexOf(obj) >= 0) {
                                iFrameLogger.error('some recursive error magic', consoleDebugScope);
                                return;
                            }
                            seen.push(obj);
                            if (typeof obj === 'object') {
                                for (var k in obj) {
                                    if (!obj.hasOwnProperty(k)) {
                                        continue;
                                    }
                                    var np = path + (path.length ? '/' : '') + k;
                                    if (typeof obj[k] === 'function') {
                                        callbacks[np] = obj[k];
                                        callbackNames.push(np);
                                        delete obj[k];
                                    } else if (typeof obj[k] === 'object') {
                                        pruneFunctions(np, obj[k]);
                                    }
                                }
                            }
                        };
                        pruneFunctions('', m.params);
                        var msg = {
                            id: currentTransactionID,
                            method: scopeMethod(m.method),
                            params: m.params
                        };
                        if (callbackNames.length) {
                            msg.callbacks = callbackNames;
                        }
                        outTbl[currentTransactionID] = {
                            callbacks: callbacks,
                            error: m.error,
                            success: m.success
                        };
                        transactionIDTable[currentTransactionID] = onMessage;
                        currentTransactionID++;
                        postMessage(msg);
                    },
                    destroy: function() {
                        try {
                            var arr = boundedChannels[buildParams.targetOrigin][buildParams.scope];
                            for (var i = 0; i < arr.length; i++) {
                                if (arr[i].win === buildParams.targetWindow) {
                                    arr.splice(i, 1);
                                }
                            }
                            if (boundedChannels[buildParams.targetOrigin][buildParams.scope].length === 0) {
                                delete boundedChannels[buildParams.targetOrigin][buildParams.scope];
                            }
                            window.removeEventListener('message', onMessage, false);
                            ready = false;
                            for (var rt in requestTable) {
                                delete requestTable[rt];
                            }
                            for (var it in invokeTable) {
                                delete invokeTable[it];
                            }
                            for (var ot in outTbl) {
                                delete outTbl[ot];
                            }
                            buildParams.targetOrigin = null;
                            pendingQueue = [];
                            iFrameLogger.log('channel "' + channelID + '" destroyed', consoleDebugScope);
                            channelID = '';
                        } catch (destroyErr) {
                            iFrameLogger.error('destroy channel error: ' + destroyErr.toString(), consoleDebugScope);
                        }
                    }
                };
                channelObject.bind('__ready', onReady);
                window.setTimeout(function() {
                    postMessage({
                        method: scopeMethod('__ready'),
                        params: 'win_handshake'
                    }, true);
                }, 0);
                return channelObject;
            };
        };
        module.exports = function() {
            if (window.postMessage && JSON && JSON.parse && JSON.stringify && window.addEventListener) {
                return new IFrameManager();
            } else {
                return false;
            }
        }();
        return module.exports;
    }();
    SimilarDeals.library.pageReady = function() {
        var module = {
            exports: {}
        };
        var promiseCollection = SimilarDeals.library.promiseCollection();
        var eventHandlers = SimilarDeals.library.eventHandlers;
        var docIsLoaded = window.document.readyState == 'complete' || window.document.readyState == 'interactive' || window.document.readyState === 'loaded';
        if (docIsLoaded) {
            promiseCollection.invoke();
        } else {
            eventHandlers.addEventListener(document, 'DOMContentLoaded', function(event) {
                promiseCollection.invoke();
            });
        }
        module.exports = promiseCollection.registerPromise;
        return module.exports;
    }();
    SimilarDeals.core.infoDeliverer = function() {
        var module = {
            exports: {}
        };

        var delLogger = SimilarDeals.library.logger;
        var mainInit = SimilarDeals.core.init;

        var pParam = {"info":{"partner":{"id":"1130","partnerID":"1130","sub_id":"tests","subID":"tests","appid":"ultrasurf"},"rules":{"l":".*","mc":false,"d":"ad.doubleclick.net","couponsInExtension":[{"id":179147,"name":"10% off All Items at Optimum Nutrition","top":true,"code":"Savoo2014","value":"10%","rating":0,"content":"Enter this exclusive code at checkout to get 10% discount on all items.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=179147&pid=1130&i=1&sid=tests"},{"id":179886,"name":"10% off Orders When You Join The Academy at Optimum Nutrition","top":false,"code":null,"value":"10%","rating":0,"content":"Follow through this link and join the academy to get 10% foxydeal on your order.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=179886&pid=1130&i=1&sid=tests"},{"id":181747,"name":"Free Next Day Delivery On All Orders £50 or More at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Follow this link to get free next day delivery on orders £50 or more received before 3 pm.","minimum_order_value":"50€","customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=181747&pid=1130&i=1&sid=tests"},{"id":185943,"name":"Consult the Knowledge Centre for Infos on Various Sports at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Click this link to start learning about various sports to help you lead a healthier lifestyle. Simply click the 'Knowledge Centre' tab.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=185943&pid=1130&i=1&sid=tests"},{"id":185944,"name":"Shop Depending on Your Goals at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Follow through this link to start shopping products depending on your goals, from loosing weight to bulking up. Simply click on the 'Shop By Goals' tab.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=185944&pid=1130&i=1&sid=tests"},{"id":185945,"name":"Wide Range Selection of Sports Specific Products at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Follow through this link to start shopping products depending on your sports. Simply click on \"Shop By Sport\" tab.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=185945&pid=1130&i=1&sid=tests"},{"id":185946,"name":"Wide Range Selection of Protein & Amino Acids at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Follow through this link to view a wide range selection of protein and amino acids at great prices to choose from. Simply click on the \"Shop By Range\" tab.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=185946&pid=1130&i=1&sid=tests"},{"id":203622,"name":"£4.74 Flat Rate Delivery on All Orders Under £50 at Optimum Nutrition","top":false,"code":null,"value":null,"rating":0,"content":"Go through this link to get a £4.74 flat rate delivery on all orders under £50.","minimum_order_value":null,"customers":"none","deep_link":"http://www.foxydeal.co.uk/?p=203622&pid=1130&i=1&sid=tests"}]},"browser":{"SF":true},"checkUID":false,"config":{"cdn":{"host":"https://s3.amazonaws.com/cdn.similardeals.net/sf/v6/11/3"},"sdiframesrc":"https://api.similardeals.net/transport/test/proxy_sd_006.html"},"locale":"in","aboutLink":"http://similardeals.net/","uid":"54fa805ae4b0a64cefc2a45c"},"tldsArray":"[\"com\",\"co.uk\",\"fr\",\"de\",\"us\",\"ru\",\"pl\",\"nu\",\"nl\",\"com.br\",\"es\",\"eu\",\"com.ua\",\"it\",\"me\",\"net\",\"at\",\"ch\",\"org\",\"tv\",\"ua\",\"cl\",\"dk\",\"co\",\"com.ar\",\"com.mx\",\"bg\",\"se\",\"kz\",\"travel\",\"msk.ru\",\"by\",\"su\",\"com.pl\",\"co.in\",\"in\",\"com.de\",\"org.br\",\"uk.com\",\"coop\",\"us.com\",\"com.ru\",\"xn--p1ai\",\"cz\",\"ca\",\"pro\",\"com.es\",\"info\",\"fi\",\"eu.com\",\"pt\",\"biz\",\"ag\",\"ie\",\"edu\",\"com\\\\\",\"org.uk\",\"net.br\",\"net.ua\",\"kiev.ua\",\"io\",\"club\",\"be\",\"ru.com\",\"in.ua\",\"mx\",\"com.co\",\"co.nl\",\"co.za\",\"com.au\",\"hu\",\"ro\",\"rs\",\"no\",\"net.pl\",\"inf.br\",\"mu\",\"com.pe\",\"com.pa\",\"cc\",\"org.pl\",\"london\",\"to\",\"co.it\",\"ir\",\"md\",\"ws\",\"com.mm\",\"co.jp\",\"sk\",\"jp\",\"com.hk\",\"dp.ua\",\"co.id\",\"blogspot.de\",\"com.ng\",\"com.tw\",\"co.th\",\"com.my\",\"blogspot.fr\",\"ly\",\"co.il\",\"tk\",\"hr\",\"co.nz\",\"ba\",\"com.pk\",\"ph\",\"ee\",\"lt\",\"gr\",\"co.kr\",\"im\",\"com.tr\",\"ma\",\"cn\",\"re\",\"gov\",\"com.ph\",\"tn\",\"blogspot.ca\",\"fm\",\"s3.amazonaws.com\",\"blogspot.com.br\",\"com.cn\",\"om\",\"appspot.com\",\"com.uy\",\"my\",\"br.com\",\"com.ve\",\"g12.br\",\"edu.ar\",\"br\",\"sg\",\"com.sg\",\"name\",\"waw.pl\",\"blogspot.com\",\"gov.pl\",\"uk\",\"szczecin.pl\",\"shop.pl\",\"ae\",\"edu.pl\",\"krakow.pl\",\"sklep.pl\",\"info.pl\",\"limanowa.pl\",\"opole.pl\",\"swinoujscie.pl\",\"zgora.pl\",\"blogspot.com.es\",\"cat\",\"or.id\",\"sh\",\"hk\",\"qc.ca\",\"ab.ca\",\"blogspot.ch\",\"blogspot.pt\",\"pe\",\"gi\",\"co.zw\",\"lk\",\"co.ke\",\"com.do\",\"com.sv\",\"pf\",\"nm.us\",\"lv\",\"kr\",\"ms\",\"com.sa\",\"is\",\"org.tr\",\"blogspot.se\",\"or.jp\",\"vn\",\"ne.jp\",\"blogspot.nl\",\"org.au\",\"net.au\",\"gov.au\",\"vg\",\"as\",\"no.com\",\"ge\",\"com.bd\",\"blogspot.no\",\"com.mo\",\"co.at\",\"am\",\"go.kr\",\"tf\",\"com.pt\",\"lu\",\"org.za\",\"blogspot.it\",\"mb.it\",\"to.it\",\"vi.it\",\"genova.it\",\"ct.it\",\"sm\",\"at.it\",\"pi.it\",\"ci.it\",\"gr.it\",\"or.it\",\"tp.it\",\"ca.it\",\"fo\",\"ci\",\"cm\",\"com.gh\",\"za.net\",\"mobi\",\"ng\",\"rw\",\"co.mz\",\"co.ug\",\"za.com\",\"za.org\",\"blogspot.hu\",\"ingatlan.hu\",\"bolt.hu\",\"shop.hu\",\"hu.com\",\"co.hu\",\"blogspot.in\",\"uno\",\"asia\",\"edu.pt\",\"co.ao\",\"blogspot.com.au\",\"ml\",\"od.ua\",\"com.cy\",\"com.lb\",\"tomsk.ru\",\"store.ro\",\"blogspot.ro\",\"dn.ua\",\"com.ro\",\"co.rs\",\"in.rs\",\"si\",\"com.hr\",\"so\",\"la\",\"al\",\"org.rs\",\"edu.rs\",\"gov.rs\",\"co.me\",\"blogspot.fi\",\"museum\",\"karelia.ru\",\"com.ec\",\"edu.br\"]"};
        var consoleDebugScope = '[INFO DELIVERER]: ';

        function getDomain() {
            try {
                var thisHostName = document.location.hostname;
                var isSupported = false;
                var domainParts = thisHostName.split('.');
                var thisProcDomain = '';
                while (domainParts.length > 0 && !isSupported) {
                    isSupported = pParam.tldsArray.indexOf(domainParts.join('.')) > -1;
                    if (isSupported) {
                        return thisProcDomain + '.' + domainParts.join('.');
                    } else {
                        thisProcDomain = domainParts[0];
                        domainParts.splice(0, 1);
                    }
                }
                return false;
            } catch (getDomainErr) {
                return false;
            }
        }

        var infoObject = {
            partner: {
                id: pParam.info.partner.id,
                partnerId: pParam.info.partner.partnerID,
                sub_id: pParam.info.partner.sub_id,
                subId: pParam.info.partner.sub_id,
                appid: pParam.info.partner.appid || '',
                applink: pParam.info.partner.applink || ''
            },
            rules: pParam.info.rules,
            user: {
                uid: pParam.info.uid,
                ext: '',
                locale: pParam.info.locale
            },
            browser: {
                SF: pParam.info.browser.SF
            },
            baseUrl: 'https://go.similardeals.net',
            tldArray: pParam.tldsArray,
            domain: {
                rules: pParam.info.rules.d,
                impressions: pParam.info.rules.d
            },
            config: pParam.info.config || {},
            aboutLink: pParam.info.aboutLink || ''
        };

        var tldrDomain = getDomain();
        if (tldrDomain === false) {
            delLogger.warn('TLDR domain is false', consoleDebugScope);
        } else {
            infoObject.domain.impressions = tldrDomain;
        }

        for (var inThere in pParam.info) {
            if (infoObject.hasOwnProperty(inThere) === false) {
                infoObject[inThere] = pParam.info[inThere];
            }
        }

        mainInit.call(infoObject);
        return module.exports;
    }();
    SimilarDeals.engine.similarDeals = function() {
        var module = {
            exports: {}
        };
        var pageReady = SimilarDeals.library.pageReady;
        var crossIFrameManager = SimilarDeals.library.crossIframeManager;
        var browserCheck = SimilarDeals.library.browserCheck;
        var sdLogger = SimilarDeals.library.logger;
        var mainInit = SimilarDeals.core.init;

        function SimilarDealsClass() {
            var consoleDebugScope = '[SIMILAR DEALS]';
            var resolveOffers = null;
            var rejectOffers = null;
            var thatInfoObject = null;
            var thisExtractedData = null;

            var thisPromise = new Promise(function(resolve, reject) {
                resolveOffers = resolve;
                rejectOffers = reject;
            });

            this.getSimilarDealsPromise = function() {
                return thisPromise;
            };

            var evaluateFrame = new function() {
                var _this = this;
                var isReady = false;

                this.setReadyState = function(pValue) {
                    isReady = pValue;
                };

                this.evaluate = null;

                this.appendLibsIFrame = function(pNext) {
                    try {
                        var oldIFrame = document.getElementById('FoxyDealLibs');
                        oldIFrame.parentNode.removeChild(oldIFrame);
                    } catch (removeOldErr) {
                    }

                    try {
                        var libsIframe = window.document.createElement('iframe');
                        libsIframe.id = 'FoxyDealLibs';
                        libsIframe.style.display = 'none';
                        libsIframe.src = (window.document.domain === window.document.location.hostname) ?
                            'about:blank' : 'javascript:void((function(){document.open();document.domain="' +
                        document.domain + '";document.close();})())';
                        libsIframe.addEventListener(
                            'load',

                            function() {
                                try {
                                    var iframeWindow = document.getElementById('FoxyDealLibs').contentWindow;
                                    var iframeDocument = iframeWindow.document;
                                    var externalScriptElem = iframeDocument.createElement('script');
                                    externalScriptElem.setAttribute(
                                        'src',
                                        '//s3.amazonaws.com/cdn.foxydeal.com/libs/js/wgxpath.install.js'
                                    );
                                    var done = false;
                                    externalScriptElem.onload = externalScriptElem.onreadystatechange = function() {
                                        if (!done && (!this.readyState ||
                                            this.readyState === 'loaded' ||
                                            this.readyState === 'interactive' ||
                                            this.readyState === 'complete')) {
                                            done = true;
                                            externalScriptElem.onload = externalScriptElem.onreadystatechange = null;
                                            iframeWindow.wgxpath.install();
                                            _this.evaluate = function(
                                                xpathExpression,
                                                contextNode,
                                                namespaceResolver,
                                                resultType,
                                                result
                                            ) {
                                                return iframeDocument.evaluate(
                                                    xpathExpression,
                                                    contextNode,
                                                    namespaceResolver,
                                                    resultType,
                                                    result);
                                            };

                                            sdLogger.log('external document evaluate ready', consoleDebugScope);
                                            pNext(true);
                                        }
                                    };

                                    iframeDocument.getElementsByTagName('head')[0].appendChild(externalScriptElem);
                                } catch (iframeLoadHandlerErr) {
                                    sdLogger.error('library iframe load handler error: ' +
                                        iframeLoadHandlerErr.toString(), consoleDebugScope);
                                    pNext(false);
                                }
                            },

                            false);

                        document.body.appendChild(libsIframe);
                    } catch (appendIframeErr) {
                        sdLogger.error('append library iframe error: ' + appendIframeErr.toString(), consoleDebugScope);
                        pNext(false);
                    }
                };

                function extract(pXpath) {
                    try {
                        if (!pXpath) {
                            return false;
                        }

                        var evalResult = _this.evaluate(pXpath, document, null, 0, null);
                        var resultValue = '';
                        switch (evalResult.resultType) {
                            case 1:
                                resultValue = evalResult.numberValue.toString();
                                break;
                            case 2:
                                resultValue = evalResult.stringValue;
                                break;
                            case 3:
                                resultValue = evalResult.booleanValue.toString();
                                break;
                            default:
                                var selectedNode = evalResult.iterateNext();
                                if (!selectedNode) {
                                    return false;
                                } else if (selectedNode.textContent) {
                                    resultValue = selectedNode.textContent;
                                } else if (selectedNode.innerText) {
                                    resultValue = selectedNode.innerText;
                                } else if (selectedNode.value) {
                                    resultValue = selectedNode.value;
                                } else if (selectedNode.text) {
                                    resultValue = selectedNode.text;
                                } else {
                                    return false;
                                }
                        }
                        return resultValue.replace(/[\t\r\n ]+/igm, ' ').replace(/^[\t\r\n ]+|[\t\r\n ]+$/igm, '');
                    }
                    catch (extractErr) {
                        sdLogger.error('extract xpath data error on "' + pXpath + '": ' + extractErr.toString(),
                            consoleDebugScope);
                        return false;
                    }
                };

                this.extractSD = function(pRules) {
                    try {
                        if (!isReady) {
                            return null;
                        }

                        if (!pRules) {
                            sdLogger.error('[extractSD] no rules supplied to the function', consoleDebugScope);
                            return null;
                        }

                        pRules.t = pRules.tc ? pRules.tc[0] : (pRules.t ? pRules.t : null);
                        if (!pRules.t) {
                            sdLogger.error('[extractSD] no rule title', consoleDebugScope);
                            return null;
                        }

                        var rxStr = pRules.rx ? pRules.rx : (pRules.l ? pRules.l : '.*');
                        var rx = new RegExp(rxStr);
                        if (!rx.test(document.location.href)) {
                            sdLogger.error('[extractSD] invalid document.location.href', consoleDebugScope);
                            return null;
                        }

                        var oRequestParams = {
                            GetOffers:{
                                browser:window.navigator.userAgent,
                                merchant_core_url:pRules.d,
                                product_url:document.location.href
                            }
                        };
                        var mandatory = {t:'title'};
                        var optional = {
                            p:'price',
                            c:'currency'
                        };
                        for (var mandatoryField in mandatory) {
                            var mandatoryValue = extract(pRules[mandatoryField]);
                            if (mandatoryValue) {
                                oRequestParams.GetOffers[mandatory[mandatoryField]] = mandatoryValue;
                            } else {
                                sdLogger.error('[extractSD] invalid mandatory extract data return', consoleDebugScope);
                                return null;
                            }
                        }

                        for (var optionalField in optional) {
                            if (pRules[optionalField]) {
                                if (optionalField === 'p') {
                                    var priceValue = extract(pRules[optionalField]);
                                    if (priceValue) {
                                        if (!priceValue.match(/[1-9]/gm)) {
                                            return null;
                                        }

                                        oRequestParams.GetOffers[optional[optionalField]] = priceValue;
                                    } else {
                                        sdLogger.error('[extractSD] invalid price filed return', consoleDebugScope);
                                        return null;
                                    }
                                } else {
                                    var optionalValue = extract(pRules[optionalField].x);
                                    if (optionalValue) {
                                        oRequestParams.GetOffers[optional[optionalField]] = optionalValue;
                                    } else if (pRules[optionalField].r === 1) {
                                        sdLogger.error('[extractSD] invalid optional data', consoleDebugScope);
                                        return null;
                                    }
                                }
                            }
                        }

                        return {
                            "query":{
                                "keywords":oRequestParams.GetOffers.title,
                                "merchant_core_url":oRequestParams.GetOffers.merchant_core_url,
                                "product_url":oRequestParams.GetOffers.product_url,
                                "price":oRequestParams.GetOffers.price,
                                "currency":oRequestParams.GetOffers.currency
                            },
                            "config":{
                                "partner_id":"",
                                "uid":""
                            }
                        };
                    }
                    catch (extractSDErr) {
                        sdLogger.error('[extractSD] run error: ' + extractSDErr.toString(), consoleDebugScope);
                        return null;
                    }
                };

                this.setup = function(pNext) {
                    if (isReady === false) {
                        sdLogger.log('libs iframe setup', consoleDebugScope);
                        _this.appendLibsIFrame(function(libsIframeAppendRet) {
                            if (libsIframeAppendRet === true) {
                                sdLogger.log('libs iframe loaded', consoleDebugScope);
                                isReady = true;
                                pNext(true);
                            } else {
                                sdLogger.error('libs iframe not loaded', consoleDebugScope);
                                pNext(false);
                            }
                        });
                    }
                };
            };

            var ajaxFrame = new function() {
                var ajaxFrameSrc = '';
                var _this = this;
                var isReady = false;
                var channel = null;

                this.setAjaxFrameSrc = function(pValue) {
                    ajaxFrameSrc = pValue;
                };

                function setupAjaxFrameChannel() {
                    if (isReady) {
                        return false
                    }

                    try {
                        channel = crossIFrameManager.createChannel({
                            targetWindow: document.getElementById('InfoSDProxy').contentWindow,
                            targetOrigin: ajaxFrameSrc,
                            scope:'InfoSDFrame',
                            onReady:function() {
                                sdLogger.log('ajax iframe channel ready', consoleDebugScope);
                                if (thisExtractedData !== null) {
                                    channel.call({
                                        method:'getSimilarDeals',
                                        params: encodeURIComponent(JSON.stringify(thisExtractedData)),
                                        success:function(pDealsRet) {}
                                    });
                                }
                            }
                        });

                        channel.bind('gotSimilarDeals', function(pTransaction, pParam) {
                            thatInfoObject = null;
                            var thisDeals = JSON.parse(pParam.data);
                            if (pParam.status !== 200) {
                                sdLogger.error('SimilarDeals return status not OK', consoleDebugScope);
                                rejectOffers(new Error('Invalid response return'));
                            } else {
                                if (thisDeals.FoundOffers.amount !== 0) {
                                    sdLogger.log('SimilarDeals returned SOME', consoleDebugScope);
                                    try {
                                        resolveOffers(thisDeals);
                                    } catch (resolveErr) {
                                        rejectOffers(resolveErr);
                                    }
                                } else {
                                    sdLogger.log('SimilarDeals returned: NONE', consoleDebugScope);
                                    rejectOffers(new Error('There are no deals to display'));
                                }
                            }
                        });

                        channel.bind('log', function(pTransaction, pParam) {
                            sdLogger[pParam.type]('[KID AJAX CHANNEL] ' + pParam.data, consoleDebugScope);
                        });

                        return true;
                    } catch (ajaxFrameChannelSetupErr) {
                        sdLogger.error('ajax iframe channel creation error', consoleDebugScope);
                        channel = null;
                        return false;
                    }
                };

                this.appendAjaxIFrame = function(pNext) {
                    if (isReady) {
                        pNext(false);
                    } else {
                        try {
                            var oldIFrame = document.getElementById('InfoSDProxy');
                            oldIFrame.parentNode.removeChild(oldIFrame);
                        } catch (removeOldErr) {}

                        try {
                            var proxyIframe = document.createElement('iframe');
                            proxyIframe.id = 'InfoSDProxy';
                            proxyIframe.style.display = 'none';
                            proxyIframe.src = ajaxFrameSrc;
                            proxyIframe.addEventListener(
                                'load',

                                function() {
                                    pNext(true);
                                },

                                false);
                            document.body.appendChild(proxyIframe);
                        } catch (appendIframeErr) {
                            sdLogger.error('append ajax iframe error: ' + appendIframeErr.toString(), consoleDebugScope);
                            pNext(false)
                        }
                    }
                };

                this.setup = function(pNext) {
                    if (ajaxFrameSrc !== '' && isReady === false) {
                        _this.appendAjaxIFrame(function(ajaxIframeAppendRet) {
                            if (ajaxIframeAppendRet === true) {
                                sdLogger.log('ajax iframe loaded', consoleDebugScope);
                                var checkChannelSetup = setupAjaxFrameChannel();
                                if (checkChannelSetup) {
                                    isReady = true;
                                } else {
                                    isReady = false;
                                }
                            } else {
                                isReady = false;
                            }

                            if (isReady === true) {
                                sdLogger.info('ajax iframe ready', consoleDebugScope);
                            } else {
                                sdLogger.warn('ajax iframe not ready', consoleDebugScope);
                            }

                            pNext(isReady);
                        });
                    } else {
                        sdLogger.warn('ajax iframe not ready', consoleDebugScope);
                        pNext(false);
                    }
                };
            };

            function initMainInfoListener() {
                mainInit.done().then(function(pResolvedInfoObject) {
                    thatInfoObject = JSON.parse(JSON.stringify(pResolvedInfoObject));
                    if (thatInfoObject.hasOwnProperty('config') === true) {
                        if (thatInfoObject.config.hasOwnProperty('sdiframesrc') === true) {
                            ajaxFrame.setAjaxFrameSrc(thatInfoObject.config.sdiframesrc);
                            if (thatInfoObject.user.uid && thatInfoObject.user.uid !== ''
                                && thatInfoObject.rules && thatInfoObject.rules !== '') {
                                var extractedData = evaluateFrame.extractSD(thatInfoObject.rules);
                                if (extractedData) {
                                    extractedData.config.uid = thatInfoObject.user.uid;
                                    extractedData.config.partner_id = thatInfoObject.partner.id;
                                    thisExtractedData = extractedData;
                                    sdLogger.info('Some data was extracted from the page', consoleDebugScope);
                                    ajaxFrame.setup(function(ajaxFrameSetupReturn) {
                                        if (ajaxFrameSetupReturn === false) {
                                            rejectOffers(new Error('There was an error while setting up ajax frame'));
                                        }
                                    });
                                } else {
                                    thatInfoObject = null;
                                    sdLogger.warn('No data was extracted from the page', consoleDebugScope);
                                    rejectOffers(new Error('No valid data was extracted from the page'));
                                }
                            } else {
                                rejectOffers(new Error('Invalid info object was received'));
                            }
                        } else {
                            rejectOffers(new Error('The resolved info object did not contain pc iframe src'));
                        }
                    } else {
                        rejectOffers(new Error('The resolved info object did not the config property'));
                    }
                });
            };

            browserCheck().then(function(pRetData) {
                if (pRetData.supported === true) {
                    pageReady().then(function resolve() {
                        if (pRetData.hasOwnProperty('ie')) {
                            sdLogger('IE detected', consoleDebugScope);
                            evaluateFrame.setup(function(evalFrameSetupRet) {
                                if (evalFrameSetupRet === true) {
                                    sdLogger.info('evaluate iframe ready', consoleDebugScope);
                                    initMainInfoListener();
                                } else {
                                    sdLogger.error('evaluate iframe setup err', consoleDebugScope);
                                }
                            });
                        } else {
                            try {
                                evaluateFrame.evaluate = function(
                                    xpathExpression,
                                    contextNode,
                                    namespaceResolver,
                                    resultType,
                                    result
                                ) {
                                    return window.document.evaluate(
                                        xpathExpression,
                                        contextNode,
                                        namespaceResolver,
                                        resultType,
                                        result);
                                };

                                evaluateFrame.setReadyState(true);
                                sdLogger.info('evaluate iframe ready', consoleDebugScope);
                                initMainInfoListener();
                            } catch (frameSetErr) {
                                evaluateFrame.setReadyState(false);
                                sdLogger.error('evaluate iframe setup err', consoleDebugScope);
                            }
                        }
                    });
                }
            });
        }

        var localSimilarDealsInstance = new SimilarDealsClass();
        module.exports.onDeals = function() {
            return localSimilarDealsInstance.getSimilarDealsPromise();
        };

        return module.exports;
    }();
    SimilarDeals.engine.coupons = function() {
        var module = {
            exports: {}
        };
        var init = SimilarDeals.core.init;
        var addCoupons = function addCoupons() {
            var baseUrl = '';
            var couponsUrl = '';
            var couponsObj = {};
            return new Promise(function(resolve, reject) {
                init.done().then(function resolved(info) {
                    'use strict';
                    couponsObj.domain = info.domain.impressions;
                    if (info.rules.couponsInExtension) {
                        couponsObj.couponsInExtension = info.rules.couponsInExtension;
                        resolve(couponsObj);
                    } else if (info.rules.cp && info.rules.cp.c && info.rules.cp.pid && info.user.uid) {
                        if (info.rules.cp.n === 0) {
                            reject('No coupons found');
                        }

                        couponsObj.couponsInBlog = {};
                        couponsObj.couponsInBlog.amount = info.rules.cp.n;
                        couponsObj.couponsInBlog.domain = info.domain.rules;
                        baseUrl = info.baseUrl || 'http://go.' + SimilarDeals.originName + '.com/';
                        couponsUrl = baseUrl + '/' + info.rules.cp.c + '/' + info.rules.cp.pid + '/' + info.user.uid;
                        couponsObj.couponsInBlog.url = couponsUrl;

                        resolve(couponsObj);
                    } else {
                        reject('CP rules nonexistent or incomplete.');
                    }
                });
            });
        };
        module.exports = addCoupons;
        return module.exports;
    }();
    SimilarDeals.engine.addPartnerInfo = function() {
        var module = {
            exports: {}
        };
        var init = SimilarDeals.core.init;

        module.exports = function() {
            var partnerInfo = {};
            return new Promise(function(resolve, reject) {
                init.done().then(function resolved(info) {
                    'use strict';
                    if (info.partner && info.partner.appid) {
                        partnerInfo.text = info.partner.appid;
                        if (info.partner.applink) {
                            partnerInfo.link = info.partner.applink;
                        }
                        resolve(partnerInfo);
                    } else {
                        reject('About link data not set.');
                    }
                });
            });
        };
        return module.exports;
    }();
    SimilarDeals.engine.addAboutLink = function() {
        var module = {
            exports: {}
        };
        var init = SimilarDeals.core.init;
        module.exports = function() {
            var aboutLinkData = {
                'text': 'About'
            };
            return new Promise(function(resolve, reject) {
                init.done().then(function resolved(info) {
                    'use strict';
                    if (info.aboutLink) {
                        aboutLinkData.link = info.aboutLink;
                        resolve(aboutLinkData);
                    } else {
                        reject('About link data not set.');
                    }
                });
            });
        };
        return module.exports;
    }();
    SimilarDeals.ui.fdUi = function() {
        var uberFrameName = '';
        var tempSiblings = [];
        var afterCheckInterval = 0;
        var module = {
            exports: {}
        };
        var display = {
            pageReady: (function() {
                "use strict";


                var pageReady = function(callback) {
                        readyBound = false;
                        pageReady.isReady = false;
                        if (typeof callback === "function") {
                            DOMReadyCallback = callback;
                        }
                        bindReady();
                    },


                    document = window.document,
                    readyBound = false,
                    DOMReadyCallback = function() { },


                    DOMContentLoaded = function() {
                        if (document.addEventListener) {
                            document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                        } else {


                            document.detachEvent("onreadystatechange", DOMContentLoaded);
                        }
                        DOMReady();
                    },


                    DOMReady = function() {

                        if (!pageReady.isReady) {

                            if (!document.body) {
                                return setTimeout(DOMReady, 1);
                            }

                            pageReady.isReady = true;

                            DOMReadyCallback();

                        }
                    },

                    bindReady = function() {
                        var toplevel = false;

                        if (readyBound) {
                            return;
                        }
                        readyBound = true;



                        if (document.readyState !== "loading") {
                            DOMReady();
                        }


                        if (document.addEventListener) {

                            document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);

                            window.addEventListener("load", DOMContentLoaded, false);

                        } else if (document.attachEvent) {


                            document.attachEvent("onreadystatechange", DOMContentLoaded);

                            window.attachEvent("onload", DOMContentLoaded);


                            try {
                                toplevel = window.frameElement == null;
                            } catch (e) { }
                            if (document.documentElement.doScroll && toplevel) {
                                doScrollCheck();
                            }
                        }
                    },


                    doScrollCheck = function() {
                        if (pageReady.isReady) {
                            return;
                        }
                        try {


                            document.documentElement.doScroll("left");
                        } catch (error) {
                            setTimeout(doScrollCheck, 1);
                            return;
                        }

                        DOMReady();
                    };


                pageReady.isReady = false;


                return pageReady;
            })(),
            onInitialized: (function() {
                var callbacks = [];
                var initialized = false;
                var params;
                return {
                    register: function(callback) {
                        if (initialized) {
                            callback.apply(null, params);
                        } else {
                            callbacks.push(callback);
                        }
                    },
                    invoke: function() {
                        params = arguments;
                        initialized = true;
                        for (callbackInd = 0; callbackInd < callbacks.length; callbackInd++) {
                            callbacks[callbackInd].apply(null,params);
                        }
                    }
                };
            })(),
            main: {
                addEventListener: function(element, event, eventHandler) {
                    if (element.addEventListener) {
                        element.addEventListener(event, eventHandler, false);
                    } else if (element.attachEvent) {
                        element.attachEvent('on' + event, eventHandler);
                    }
                },
                fireEvent: function(event, data) {
                    parent.postMessage(JSON.stringify({
                        event: event,
                        data: data
                    }), '*');
                }
            },
            ui: {
                window: {},
                config: {
                    prefix: 'display-',
                    globalStyles: 'position:fixed;display:none;opacity:0;z-index:2147483647 !important'
                },
                closeCallbacks: [],
                reportImpression: (function() {
                    var reported = false;
                    return function(type) {
                        if (reported) {
                            return;
                        }
                        var init = SimilarDeals.core.init;

                        init.done().then(
                            function resolved(info) {
                                'use strict';


                                var impressionTypes = {
                                    coupons: 24,
                                    offers: 21
                                };
                                var url = 'https://transaction.' + SimilarDeals.originName + '.com/aff_i?offer_id=' +
                                    impressionTypes[type] +
                                    '&aff_id=' +
                                    encodeURIComponent(info.partner.id.toString()) +
                                    '&aff_sub5=' +
                                    (info.domain.impressions ? info.domain.impressions : SimilarDeals.originName + '.de');
                                var imgEl = document.createElement('img');

                                imgEl.setAttribute('src', url);
                                imgEl.setAttribute('style', 'visibility: hidden;');

                                document.body.appendChild(imgEl);
                            }
                        );
                    }
                })(),
                frames: {
                    container: {
                        bar: {
                            element: null,
                            window: null,
                            styles: 'top:0;left:0;width:100%;',
                            measure: ['100%', '55px']
                        },
                        couponsbar: {
                            element: null,
                            window: null,
                            styles: 'top:0;left:0;width:100%;',
                            measure: ['100%', '55px']
                        },
                        bigcouponbar: {
                            element: null,
                            window: null,
                            styles: 'top:0;left:0;width:100%;',
                            measure: ['100%', '80px']
                        },
                        list: {
                            element: null,
                            window: null,
                            styles: 'top:50px;',
                            measure: ['560px', '370px']
                        },
                        couponslist: {
                            element: null,
                            window: null,
                            styles: 'top:50px;',
                            measure: ['470px', '370px']
                        },
                        welcome: {
                            element: null,
                            window: null,
                            styles: 'top:50px;left:50%;margin-left:-190px;',
                            measure: ['380px', '310px']
                        },
                        coupons: {
                            element: null,
                            window: null,
                            styles: 'top:0;left:0;',
                            measure: ['40px', '40px']
                        }
                    },
                    inject: function(onInjected) {
                        var init = SimilarDeals.core.init;

                        init.done().then(
                            function resolved(info) {
                                'use strict';

                                display.ui.window.couponsActive = false;
                                var loadCount = 0;
                                var displayBigCouponBarFlag = false;

                                display.main.addEventListener(window, 'message', function(msg) {
                                    var data = JSON.parse(msg.data);

                                    if (!data) {
                                        return;
                                    }

                                    if (data.event === 'displayBigCouponBar') {
                                        display.ui.frames.hide('bar');
                                        display.ui.frames.hide('couponsbar');
                                        display.ui.frames.hide('list');
                                        display.ui.frames.hide('coupons');
                                        display.ui.frames.hide('couponslist');

                                        display.ui.frames.show('bigcouponbar');
                                        display.ui.frames.findWindow('bigcouponbar').postMessage(JSON.stringify({
                                            event: 'populateBar',
                                            data: data.data
                                        }), '*');

                                        loadCount++;
                                        displayBigCouponBarFlag = true;
                                        if (onInjected && loadCount === 8) {
                                            onInjected(displayBigCouponBarFlag);
                                        }
                                    } else if (data.event === 'displayNormalUi') {
                                        loadCount++;
                                        if (onInjected && loadCount === 8) {
                                            onInjected(displayBigCouponBarFlag);
                                        }
                                    }
                                });


                                for (var frameName in display.ui.frames.container) {
                                    var attrs = display.ui.frames.container[frameName];
                                    SimilarDeals.ui.fdUi.frames.injectFrame(info.config.cdn.host + '/' + frameName + '.html', frameName, attrs.styles, attrs.measure[0], attrs.measure[1]);
                                    display.ui.window[frameName] = document.getElementById(display.ui.config.prefix + frameName);
                                    display.ui.window[frameName + 'Window'] = display.ui.window[frameName].contentWindow;

                                    display.ui.frames.container[frameName].element = display.ui.window[frameName];
                                    display.ui.frames.container[frameName].window = display.ui.window[frameName + 'Window'];

                                    if ({ bar: true, list: true, couponsbar: true, coupons: true, welcome: true, bigcouponbar: true, couponslist: true }[frameName]) {



                                        display.main.addEventListener(display.ui.window[frameName], 'load', function() {
                                            loadCount++;
                                            if (onInjected && loadCount === 8) {
                                                onInjected(displayBigCouponBarFlag);
                                            }
                                        });
                                    }
                                }
                            }
                        );
                    },
                    injectFrame: function(src, id, styles, width, height) {
                        var s = document.createElement('iframe');
                        s.setAttribute('src', src);
                        s.setAttribute('id', display.ui.config.prefix + id);
                        s.setAttribute('style', styles + display.ui.config.globalStyles);
                        s.setAttribute('frameborder', '0');
                        s.setAttribute('scrolling', 'no');
                        s.setAttribute('width', width);
                        s.setAttribute('height', height);
                        document.body.appendChild(s);
                    },
                    toggle: function(frameName) {
                        var frame = this.findFrame(frameName);

                        if (frame.style.opacity == 1) {
                            this.hide(frameName);
                            return 0;
                        } else {
                            this.show(frameName);
                            return 1;
                        }
                    },
                    hide: function(frameName) {
                        var frame = this.findFrame(frameName);

                        frame.style.opacity = '0';
                        frame.style.pointerEvents = 'none';
                        frame.style.display = 'none';

                        if (frameName === 'couponsbar') {
                            for (var sibm = 0; sibm < tempSiblings.length; sibm++) {
                                var currSmallTop = tempSiblings[sibm].style.top.substring(0, tempSiblings[sibm].style.top.indexOf('px')) - 55;
                                if (currSmallTop < 0) {
                                    currSmallTop = 0;
                                }

                                tempSiblings[sibm].style.top = currSmallTop + 'px';
                            }
                        } else if (frameName === 'bigcouponbar') {
                            for (var sibb = 0; sibb < tempSiblings.length; sibb++) {
                                var currBigTop = tempSiblings[sibb].style.top.substring(0, tempSiblings[sibb].style.top.indexOf('px')) - 80;
                                if (currBigTop < 0) {
                                    currBigTop = 0;
                                }

                                tempSiblings[sibb].style.top = currBigTop + 'px';
                            }
                        }

                        if (frameName == 'bar') {
                            var amazonBar = document.getElementById('miniATFUDP');
                            var flipkartBar = document.getElementById('fk-mainhead-id');

                            document.querySelector('html').style.paddingTop = '0';
                            if (flipkartBar !== null) flipkartBar.style.top = '0';
                            if (amazonBar !== null) amazonBar.style.marginTop = '0';

                            this.hide('couponsbar');
                            this.hide('list');
                            this.hide('welcome');
                            this.hide('bigcouponbar');
                            this.hide('couponslist');
                        }
                    },
                    show: function(frameName) {
                        var frame = this.findFrame(frameName);
                        uberFrameName = frameName;
                        frame.style.opacity = '1';
                        frame.style.pointerEvents = 'initial';
                        frame.style.display = 'block';

                        this.showOnTop();
                        if (frameName === 'couponsbar' || frameName === 'bar') {
                            var thisLocalSibNewTopSmall = 0;
                            for (var sibi = 0; sibi < tempSiblings.length; sibi++) {
                                thisLocalSibNewTopSmall = parseInt(tempSiblings[sibi].style.top.substring(0, tempSiblings[sibi].style.top.indexOf('px'))) + 55;
                                tempSiblings[sibi].style.top = thisLocalSibNewTopSmall + 'px';
                            }
                        }

                        if (frameName === 'bigcouponbar') {
                            for (var sibi = 0; sibi < tempSiblings.length; sibi++) {
                                var thisLocalSibNewTopBig = parseInt(tempSiblings[sibi].style.top.substring(0, tempSiblings[sibi].style.top.indexOf('px'))) + 80;
                                tempSiblings[sibi].style.top = thisLocalSibNewTopBig + 'px';
                            }
                        }

                        if (frameName === 'bar' || frameName === 'couponsbar') {
                            var amazonBar = document.getElementById('miniATFUDP');
                            var flipkartBar = document.getElementById('fk-mainhead-id');

                            document.querySelector('html').style.paddingTop = '54px';
                            if (amazonBar !== null) amazonBar.style.marginTop = '54px';
                            if (flipkartBar !== null) flipkartBar.style.top = '54px';
                        } else if (frameName === 'bigcouponbar') {
                            document.querySelector('html').style.paddingTop = '80px';
                            var amazonBar = document.getElementById('miniATFUDP');
                            var flipkartBar = document.getElementById('fk-mainhead-id');

                            document.querySelector('html').style.paddingTop = '80px';
                            if (amazonBar !== null) amazonBar.style.marginTop = '80px';
                            if (flipkartBar !== null) flipkartBar.style.top = '80px';
                        }
                    },
                    findFrame: function(frameName) {
                        var frame = display.ui.frames.container[frameName].element;

                        if (frame === null) {
                            frame = document.getElementById(display.ui.config.prefix + frameName);

                            if (frame === undefined) {

                            }
                        }

                        return frame;
                    },
                    findWindow: function(frameName) {
                        var frame = display.ui.frames.container[frameName].window;

                        if (frame === null) {
                            frame = document.getElementById(display.ui.config.prefix + frameName).contentWindow;
                        }

                        return frame;
                    },
                    showOnTop: function () {
                        var getSiblings = function (elem) {
                            /* Checks if element is div or iframe.*/
                            var filter = function (elem) {
                                switch (elem.nodeName.toUpperCase()) {
                                    case 'DIV':
                                        return true;
                                    case 'IFRAME':
                                        return true;
                                    default:
                                        return false;
                                }
                            };

                            var sibs = [];
                            var tmpElem = elem;
                            if (elem) {
                                while (elem = elem.previousSibling) {
                                    if (!filter || filter(elem)) {
                                        sibs.push(elem);
                                    }
                                }
                                while (tmpElem = tmpElem.nextSibling) {
                                    if (!filter || filter(tmpElem)) {
                                        sibs.push(tmpElem);
                                    }
                                }
                            }

                            return sibs;
                        };

                        var frameWindow = document.getElementById(display.ui.config.prefix + 'bar');
                        var iframes = [
                            display.ui.config.prefix + 'bar',
                            display.ui.config.prefix + 'couponsbar',
                            display.ui.config.prefix + 'bigcouponbar',
                            display.ui.config.prefix + 'coupons',
                            display.ui.config.prefix + 'list',
                            display.ui.config.prefix + 'couponslist',
                            display.ui.config.prefix + 'welcome',
                            'InfoFDProxy',
                            'InfoInfoFrame'
                        ];

                        var totalHeight = 0;
                        var topHeight;
                        var zIndex;
                        var maxZIndex = 2147483647;
                        var icCouponsIcon = false;

                        var checkSiblings = function () {
                            var siblings = getSiblings(frameWindow);

                            for (var sIndex = 0; sIndex < siblings.length ; sIndex++) {
                                if (iframes.indexOf(siblings[sIndex].id) > 0) {
                                    if (siblings[sIndex].id == 'display-coupons' && siblings[sIndex].style.display == 'block') {
                                        icCouponsIcon = true;
                                    }
                                    continue;
                                }

                                topHeight = parseInt(window.getComputedStyle(siblings[sIndex]).top, 10);
                                zIndex = window.getComputedStyle(siblings[sIndex]).zIndex;
                                if (topHeight == 0 && zIndex == maxZIndex) {
                                    if (icCouponsIcon) {
                                        var elem = document.createElement('div');
                                        elem.style.position = "relative";
                                        elem.style.zIndex = maxZIndex - 10;
                                        elem.appendChild(siblings[sIndex]);
                                        document.getElementsByTagName('body')[0].appendChild(elem);
                                        return;
                                    }

                                    if (siblings[sIndex].nodeName.toUpperCase() == 'DIV') {
                                        tempSiblings.push(siblings[sIndex]);

                                        totalHeight = totalHeight;
                                        siblings[sIndex].style.top = totalHeight + 'px';
                                        siblings[sIndex].style.zIndex = zIndex - 10;

                                        var elem = document.createElement('div');
                                        elem.style.position = "relative";
                                        elem.style.zIndex = maxZIndex - 10;
                                        elem.appendChild(siblings[sIndex]);
                                        document.getElementsByTagName('body')[0].appendChild(elem);
                                    } else {
                                        tempSiblings.push(siblings[sIndex]);
                                        element = document.getElementById(siblings[sIndex].id);
                                        totalHeight = totalHeight;
                                        element.style.top = totalHeight + 'px';
                                        element.style.zIndex = zIndex - 10;
                                    }
                                }
                            }
                        }
                        checkSiblings();
                        var checkElemsAfterShow = function() {
                            if (uberFrameName !== 'coupons' && uberFrameName !== '') {
                                var aftrCheckSiblings = getSiblings(frameWindow);
                                for (var sSIndex = 0; sSIndex < aftrCheckSiblings.length; sSIndex++) {
                                    if (uberFrameName !== '')
                                        if (iframes.indexOf(aftrCheckSiblings[sSIndex].id) > 0) {
                                            if (aftrCheckSiblings[sSIndex].id == 'display-coupons' && aftrCheckSiblings[sSIndex].style.display == 'block') {
                                                icCouponsIcon = true;
                                            }
                                            continue;
                                        }
                                    topHeight = parseInt(window.getComputedStyle(aftrCheckSiblings[sSIndex]).top, 10);
                                    zIndex = window.getComputedStyle(aftrCheckSiblings[sSIndex]).zIndex;
                                    if (topHeight == 0 && zIndex >= maxZIndex) {
                                        if (tempSiblings.indexOf(aftrCheckSiblings[sSIndex]) < 0) {
                                            var toFixHeight = '55px';
                                            if (uberFrameName == 'bigcouponbar') {
                                                toFixHeight = '80px';
                                            }
                                            if (tempSiblings.indexOf(aftrCheckSiblings[sSIndex]) < 0) {
                                                tempSiblings.push(aftrCheckSiblings[sSIndex]);
                                                if (aftrCheckSiblings[sSIndex].nodeName.toUpperCase() == 'DIV') {
                                                    aftrCheckSiblings[sSIndex].style.top = toFixHeight;
                                                    aftrCheckSiblings[sSIndex].style.zIndex = zIndex - 10;
                                                    var elem = document.createElement('div');
                                                    elem.style.position = "relative";
                                                    elem.style.zIndex = maxZIndex - 10;
                                                    elem.appendChild(aftrCheckSiblings[sSIndex]);
                                                    document.getElementsByTagName('body')[0].appendChild(elem);
                                                } else if (aftrCheckSiblings[sSIndex].nodeName.toUpperCase() == 'IFRAME') {
                                                    aftrCheckSiblings[sSIndex].style.top = toFixHeight;
                                                    aftrCheckSiblings[sSIndex].style.zIndex = zIndex - 10;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };

                        var afterCheckIntervalVar = setInterval(function() {
                            afterCheckInterval++;
                            checkElemsAfterShow();
                            if (afterCheckInterval > 10) {
                                clearInterval(afterCheckIntervalVar);
                            }
                        }, 3000);
                    }
                },
                addOffers: function(offersData) {
                    display.onInitialized.register(function(displayBigCouponBarFlag) {
                        if (displayBigCouponBarFlag) {
                            return;
                        }
                        this.offersData = offersData;
                        display.ui.window.offersData = offersData;
                        var offersObj = JSON.stringify({
                            event: 'loadOfferContent',
                            offerCount: offersData.FoundOffers.amount,
                            offers: offersData.FoundOffers.OfferList
                        });

                        if (typeof (display.ui.window.barWindow) !== 'undefined' && typeof (display.ui.window.listWindow) !== 'undefined') {
                            display.ui.window.barWindow.postMessage(offersObj, '*');
                            display.ui.window.listWindow.postMessage(offersObj, '*');
                            display.ui.frames.hide('coupons');
                            display.ui.frames.hide('couponsbar');
                            display.ui.frames.show('bar');
                            display.ui.window.welcomeWindow.postMessage(JSON.stringify({ displayWelcome: true }), '*');

                            if (typeof (display.ui.window.couponsData) !== 'undefined') {
                                display.ui.addCoupons(display.ui.couponsData);
                            }
                            display.ui.reportImpression('offers');
                        }
                    });
                },
                addCoupons: function(couponsData) {
                    display.onInitialized.register(function(displayBigCouponBarFlag) {
                        if (displayBigCouponBarFlag) {
                            return;
                        }
                        display.ui.window.couponsActive = true;
                        display.ui.couponsData = couponsData;
                        display.ui.window.couponsData = couponsData;

                        var couponsObj;

                        if (typeof (couponsData.couponsInExtension) === 'object') {
                            couponsObj = JSON.stringify({
                                event: 'loadCouponContent',
                                coupons: couponsData.couponsInExtension,
                                domain: couponsData.domain
                            });

                            if (display.ui.window.bar.style.opacity == 1) {
                                if (typeof (display.ui.window.barWindow) !== 'undefined') {
                                    display.ui.window.barWindow.postMessage(couponsObj, '*');
                                    display.ui.window.couponslistWindow.postMessage(couponsObj, '*');
                                }
                            } else {
                                display.ui.window.couponslistWindow.postMessage(couponsObj, '*');
                                display.ui.frames.findWindow('coupons').postMessage(JSON.stringify({
                                    event: 'addCouponCount',
                                    count: couponsData.couponsInExtension.length
                                }), '*');

                                display.ui.frames.show('coupons');
                            }

                        } else if (typeof (couponsData.couponsInBlog) === 'object') {
                            couponsObj = JSON.stringify({
                                event: 'loadCouponContent',
                                couponCount: couponsData.couponsInBlog.amount,
                                couponLink: couponsData.couponsInBlog.url,
                                domain: couponsData.couponsInBlog.domain
                            });

                            if (display.ui.window.bar.style.opacity == 1) {
                                if (typeof (display.ui.window.barWindow) !== 'undefined') {
                                    display.ui.window.barWindow.postMessage(couponsObj, '*');
                                }
                            } else {
                                display.ui.frames.findWindow('coupons').postMessage(JSON.stringify({
                                    event: 'addCouponCount',
                                    count: couponsData.couponsInBlog.amount,
                                    domain: couponsData.couponsInBlog.domain
                                }), '*');

                                display.ui.frames.show('coupons');
                            }
                        }
                    });
                },
                addPartnerInfo: function(partnerInfo) {
                    display.onInitialized.register(function() {
                        var frameWindow = display.ui.frames.findWindow('bar');
                        var couponsBarWindow = display.ui.frames.findWindow('bigcouponbar');
                        var couponsWindow = display.ui.frames.findWindow('couponsbar');

                        frameWindow.postMessage(JSON.stringify({
                            event: 'addPartnerInfo',
                            text: partnerInfo.text,
                            link: partnerInfo.link
                        }), '*');

                        couponsBarWindow.postMessage(JSON.stringify({
                            event: 'addPartnerInfo',
                            text: partnerInfo.text,
                            link: partnerInfo.link
                        }), '*');

                        couponsWindow.postMessage(JSON.stringify({
                            event: 'addPartnerInfo',
                            text: partnerInfo.text,
                            link: partnerInfo.link
                        }), '*');
                    });
                },
                addAboutLink: function(aboutLinkData) {
                    display.onInitialized.register(function() {
                        var frameWindow = display.ui.frames.findWindow('bar');
                        var couponsBarWindow = display.ui.frames.findWindow('bigcouponbar');
                        var couponsWindow = display.ui.frames.findWindow('couponsbar');

                        frameWindow.postMessage(JSON.stringify({
                            event: 'addAboutLink',
                            text: aboutLinkData.text,
                            link: aboutLinkData.link
                        }), '*');

                        couponsBarWindow.postMessage(JSON.stringify({
                            event: 'addAboutLink',
                            text: aboutLinkData.text,
                            link: aboutLinkData.link
                        }), '*');

                        couponsWindow.postMessage(JSON.stringify({
                            event: 'addAboutLink',
                            text: aboutLinkData.text,
                            link: aboutLinkData.link
                        }), '*');
                    });
                },
                welcomePanel: function(welcomeContent, callback) {
                    display.onInitialized.register(function() {
                        var welcomeObj = JSON.stringify({
                            event: 'showWelcomePanel',
                            welcomeMessage: welcomeContent.text,
                            aboutLink: welcomeContent.link
                        });

                        if (typeof (display.ui.window.welcomeWindow) !== 'undefined') {
                            display.ui.frames.hide('list');
                            display.ui.frames.show('welcome');

                            display.ui.window.welcomeWindow.postMessage(welcomeObj, '*');

                            if (typeof (callback) === 'function') callback();
                        }
                    });
                },
                goodbyePanel: function(goodbyeContent, callback) {
                    display.onInitialized.register(function() {

                        var init = SimilarDeals.core.init;

                        init.done().then(
                            function resolved(info) {
                                'use strict';

                                display.ui.window.goodbye = display.ui.window.open(info.config.cdn.host + '/goodbye.html', '_blank');
                                display.ui.window.goodbye.focus();
                                setTimeout(function() {
                                    display.ui.window.goodbye.postMessage(JSON.stringify({
                                        event: 'loadGoodbyeContent',
                                        text: goodbyeContent.text
                                    }), '*');

                                    callback();
                                }, 200);
                            }
                        );

                    });
                },
                onClose: function(callback) {
                    display.onInitialized.register(function() {
                        var self = this;
                        display.ui.frames.hide('bar');

                        window.setTimeout(function() {
                            self.removeElement(display.ui.window.list);
                            self.removeElement(display.ui.window.bar);
                            self.removeElement(display.ui.window.welcome);
                        }, 200);
                    });
                },
                displayFeedbackPanel: function(callback) {
                    display.onInitialized.register(function() { });

                },
                displaySettings: function(settingsConfig, callback) {
                    display.onInitialized.register(function() { });

                },
                removeElement: function(el) {
                    display.onInitialized.register(function() {
                        el.parentElement.removeChild(el);
                    });
                }
            }
        };

        display.main.addEventListener(window, 'message', function(msg) {
            var data = JSON.parse(msg.data);

            if (!data) {
                return;
            }

            var open = false;
            if (data.data) {
                open = data.data.open;
            }

            switch (data.event) {
                case 'toggleCompare':
                    if (display.ui.window.list.style.opacity == 1) {
                        if (!open) {
                            display.ui.frames.hide('list');
                        }
                    } else {
                        display.ui.frames.hide('couponslist');
                        display.ui.frames.show('list');

                        var right = (window.innerWidth - data.data.position);
                        display.ui.window.list.style.right = right + 'px';

                        display.ui.frames.hide('welcome');
                    }
                    break;
                case 'toggleCoupons':
                    if (display.ui.window.couponslist.style.opacity == 1) {
                        display.ui.frames.hide('couponslist');
                    } else {
                        display.ui.frames.hide('list');
                        display.ui.frames.show('couponslist');

                        var couponsRight = (window.innerWidth - data.data.position);
                        display.ui.window.couponslist.style.right = couponsRight + 'px';

                        display.ui.frames.hide('welcome');
                    }
                    break;
                case 'closeBar':
                    display.ui.frames.hide('bar');
                    display.ui.frames.hide('couponsbar');
                    display.ui.frames.hide('bigcouponbar');
                    display.ui.frames.hide('list');
                    display.ui.frames.hide('coupons');
                    display.ui.frames.hide('couponslist');
                    break;
                case 'closeWelcomeMessage':
                    display.ui.window.welcome.style.opacity = 0;
                    display.ui.window.welcome.style.display = 'none';
                    break;
                case 'launchBigCouponsBar':
                    display.ui.frames.hide('bar');
                    display.ui.frames.hide('couponsbar');
                    display.ui.frames.hide('list');
                    display.ui.frames.hide('coupons');
                    display.ui.frames.hide('couponslist');

                    display.ui.frames.show('bigcouponbar');
                    display.ui.frames.findWindow('bigcouponbar').postMessage(JSON.stringify({
                        event: 'populateBar',
                        data: data.data
                    }), '*');
                    break;
                case 'launchCoupons':
                    display.ui.frames.hide('coupons');
                    display.ui.frames.show('couponsbar');
                    display.ui.frames.findWindow('couponsbar').postMessage(JSON.stringify({
                        event: 'updateCouponsCount',
                        couponsData: display.ui.window.couponsData
                    }), '*');
                    display.ui.reportImpression('coupons');
                    break;
                case 'posCouponsList':
                    display.ui.frames.findFrame('list').style.left = data.position;
                    break;
                case 'displaySettingsDialog':
                    display.ui.welcomePanel({});
                    break;
                case 'SimilarDealsDisable':
                    display.ui.frames.hide('bar');
                    display.ui.frames.hide('couponsbar');
                    break;
                case 'displayWelcome':
                    display.ui.welcomePanel({});
                    break;
            }
        });

        display.main.addEventListener(document, 'click', function(evt) {
            display.ui.frames.hide('list');
            display.ui.frames.hide('welcome');
        });

        display.pageReady(function() {
            display.ui.frames.inject(function(displayBigCouponBarFlag) {
                display.onInitialized.invoke(displayBigCouponBarFlag);
            });
        });
        module.exports = display.ui;
        return module.exports;
    }();
    SimilarDeals.index = function() {
        var module = {
            exports: {}
        };
        var ui = SimilarDeals.ui.fdUi;
        var addAboutLink = SimilarDeals.engine.addAboutLink;
        var addPartnerInfo = SimilarDeals.engine.addPartnerInfo;
        var coupons = SimilarDeals.engine.coupons;
        var similarDeals = SimilarDeals.engine.similarDeals;

        addPartnerInfo().then(function resolved(info) {
            ui.addPartnerInfo(info);
        }, function rejected(reason) { });
        addAboutLink().then(function resolved(info) {
            ui.addAboutLink(info);
        }, function rejected(reason) { });
        coupons().then(function resolved(data) {
            ui.addCoupons(data);
        }, function rejected(reason) { });
        similarDeals.onDeals().then(function(pResolvedDeals) {
            ui.addOffers(pResolvedDeals);
        }, function(pRejectedDeals) { });
        var infoDeliverer = SimilarDeals.core.infoDeliverer;
        return module.exports;
    }();
    SimilarDeals.aboutDisableButton = function() {
        var mainInit = SimilarDeals.core.init;
        var thisPID = '';
        var _this = this;
        var thisPartners = {
            '1012': true,
            '1026': true,
            '1040': true,
            '1052': true,
            '1054': true,
            '1068': true,
            '1070': true,
            '1081': true,
            '1091': true,
            '1096': true,
            '1098': true,
            '1100': true,
            '1104': true,
            '1108': true,
            '1110': true,
            '1114': true,
            '1120': true,
            '1124': true,
            '1126': true,
            '1130': true,
            '1142': true,
            '9999': true
        };
        var thisDomains = [
            {
                thisReg:/[\/|\.]similardeals\.net\/uninstall/i,
                thisDocPath:function() {
                    var toReturn = null;
                    try {
                        toReturn = document.getElementsByClassName('text-page')[0].getElementsByClassName('container-fluid')[0].getElementsByClassName('row')[0].getElementsByClassName('container')[0].getElementsByClassName('panel')[0].getElementsByClassName('panel-body')[0];
                    } catch (trerr) {
                        toReturn = null;
                    }

                    return toReturn;
                },
                thisStyleArray:[
                    'cursor:pointer',
                    'background:#DDC3B9 none repeat scroll 0% 0%;display:inline-block',
                    'font-weight:bold;padding:15px 20px',
                    'border-radius:5px;color:#FFF',
                    'font-size:14px;line-height:14px',
                    'text-transform:uppercase'
                ],
                thisText:'similardeals',
                thisOnEnable:'//client.similardeals.net/disable/?callBack=SimilarDeals.onDisable',
                thisOnDisable:'//client.similardeals.net/enable/'
            }
        ];
        var activePage = 0;
        var domainsL = thisDomains.length;
        var thisButtonStatus = false;
        var thisDisableButton = document.createElement('BUTTON');

        function getCookie(pKey) {
            var thisCookieArray = window.document.cookie.split('; ');
            var thisCookieArrayL = thisCookieArray.length;
            while (thisCookieArrayL--) {
                var separatorIndex = thisCookieArray[thisCookieArrayL].indexOf('=');
                separatorIndex = separatorIndex < 0 ? thisCookieArray[thisCookieArrayL].length : separatorIndex;
                var thisKey = decodeURIComponent(thisCookieArray[thisCookieArrayL].substring(0, separatorIndex));
                if (thisKey === pKey) {
                    return {key:thisKey, value:decodeURIComponent(thisCookieArray[thisCookieArrayL].substring(separatorIndex + 1, thisCookieArray[thisCookieArrayL].length))};
                }
            }
            return '';
        };
        function addButton(pNext) {
            thisDisableButton.setAttribute('id', 'sf-disable-button');
            thisDisableButton.setAttribute('style', thisDomains[activePage].thisStyleArray.join(';'));
            var btnTextNode = document.createTextNode(((thisButtonStatus) ? 'Enable ' + thisDomains[activePage].thisText : 'Disable ' + thisDomains[activePage].thisText));
            thisDisableButton.appendChild(btnTextNode);
            try {
                try {
                    var oldDisableButton = document.getElementById('sf-disable-button');
                    oldDisableButton.parentElement.removeChild(oldDisableButton);
                } catch (e) { }
                try {
                    var toAppendTo = thisDomains[activePage].thisDocPath();
                    toAppendTo.appendChild(thisDisableButton);
                    pNext(null)
                }
                catch (insertOneErr) {
                    document.body.appendChild(thisDisableButton);
                    pNext(null);
                }
            }
            catch (addButtonErr) {
                pNext(addButtonErr);
            }
        };
        function addButtonListeners(pNext) {
            try {
                thisDisableButton.addEventListener('click', thisButtonClickEventHandler, false);
                pNext(null);
            }
            catch (addBtnListenerErr) {
                pNext(addBtnListenerErr);
            }
        };
        function thisButtonClickEventHandler(evt) {
            try {
                var tempButtonRef = document.getElementById('sf-disable-button');
                try {
                    var oldScriptElement = document.getElementById('fddm_scripttag');
                    oldScriptElement.parentElement.removeChild(oldScriptElement);
                }
                catch (oldScriptRemoveErr) {
                }
                var thisScriptElement = document.createElement('script');
                thisScriptElement.setAttribute('type', 'text/javascript');
                thisScriptElement.setAttribute('id', 'fddm_scripttag');
                if (thisButtonStatus) {
                    thisScriptElement.setAttribute('src', thisDomains[activePage].thisOnDisable);
                    tempButtonRef.firstChild.data = 'Disable ' + thisDomains[activePage].thisText;
                } else {
                    thisScriptElement.setAttribute('src', thisDomains[activePage].thisOnEnable);
                    tempButtonRef.firstChild.data = 'Enable ' + thisDomains[activePage].thisText;
                }
                document.getElementsByTagName('head')[0].appendChild(thisScriptElement);
                thisButtonStatus = !thisButtonStatus;
            }
            catch (btnClickEventErr) {
            }
        };
        this.setup = function setup() {
            try {
                if (thisPartners.hasOwnProperty(thisPID) === true) {
                    while (domainsL--) {
                        if (document.location.href.match(thisDomains[domainsL].thisReg)) {
                            activePage = domainsL;
                            try {
                                var thisCookie = getCookie('fddisabled');
                                if (thisCookie === '') {
                                    thisButtonStatus = false;
                                } else {
                                    thisButtonStatus = true;
                                }
                            }
                            catch (setupCookieCheckErr) {
                            }

                            addButton(function(addBtnRet) {
                                if (addBtnRet === null) {
                                    addButtonListeners(function(addBtnListr) {
                                    });
                                }
                            });
                        }
                    }

                    domainsL = thisDomains.length;
                }
            }
            catch (setupErr) {
                domainsL = thisDomains.length;
            }
        };
        mainInit.done().then(function(pResolvedInfoObject) {
            try {
                thisPID = pResolvedInfoObject.partner.id.toString();
                if (thisPID && thisPID !== '') {
                    _this.setup();
                }
            }
            catch (e) {
            }
        });
    }();
};

var script = document.createElement('script');
script.text = "(" + pageScript + ')();';
(document.head || document.documentElement).appendChild(script);

